{
  "/tmp/nested_function_test_9s1k_5af/small_math.py": {
    "language": "python",
    "id": 927126771,
    "file_path": "/tmp/nested_function_test_9s1k_5af/small_math.py",
    "content_hash": "aed2ac435b4a1a9c4a3cb013b16a8615db0d7ee8df67ebeae78ee9ba592bd201",
    "blocks": [
      {
        "id": 927126772,
        "type": "import",
        "name": "typing",
        "content": "from typing import List, Optional",
        "symbols": [],
        "start_line": 3,
        "end_line": 3,
        "start_col": 0,
        "end_col": 33,
        "children": []
      },
      {
        "id": 927126773,
        "type": "function",
        "name": "fibonacci",
        "content": "def fibonacci(n: int) -> int:\n    \"\"\"Calculate fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)",
        "symbols": [],
        "start_line": 5,
        "end_line": 9,
        "start_col": 0,
        "end_col": 42,
        "children": []
      },
      {
        "id": 927126774,
        "type": "function",
        "name": "is_prime",
        "content": "def is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "symbols": [],
        "start_line": 11,
        "end_line": 18,
        "start_col": 0,
        "end_col": 15,
        "children": []
      },
      {
        "id": 927126775,
        "type": "function",
        "name": "gcd",
        "content": "def gcd(a: int, b: int) -> int:\n        \"\"\"Calculate greatest common divisor.\"\"\"\n        while b:\n            a, b = b, a % b\n        return a",
        "symbols": [],
        "start_line": 22,
        "end_line": 26,
        "start_col": 4,
        "end_col": 16,
        "children": []
      },
      {
        "id": 927126776,
        "type": "function",
        "name": "lcm",
        "content": "def lcm(a: int, b: int) -> int:\n        \"\"\"Calculate least common multiple.\"\"\"\n        return abs(a * b) // MathUtils.gcd(a, b)",
        "symbols": [],
        "start_line": 29,
        "end_line": 31,
        "start_col": 4,
        "end_col": 48,
        "children": []
      },
      {
        "id": 927126777,
        "type": "class",
        "name": "MathUtils",
        "content": "",
        "symbols": [],
        "start_line": 20,
        "end_line": 31,
        "start_col": 0,
        "end_col": 48,
        "children": [
          {
            "id": 927126778,
            "type": "function",
            "name": "gcd",
            "content": "def gcd(a: int, b: int) -> int:\n        \"\"\"Calculate greatest common divisor.\"\"\"\n        while b:\n            a, b = b, a % b\n        return a",
            "symbols": [],
            "start_line": 22,
            "end_line": 26,
            "start_col": 4,
            "end_col": 16,
            "children": []
          },
          {
            "id": 927126779,
            "type": "function",
            "name": "lcm",
            "content": "def lcm(a: int, b: int) -> int:\n        \"\"\"Calculate least common multiple.\"\"\"\n        return abs(a * b) // MathUtils.gcd(a, b)",
            "symbols": [],
            "start_line": 29,
            "end_line": 31,
            "start_col": 4,
            "end_col": 48,
            "children": []
          }
        ]
      }
    ],
    "relationships": []
  },
  "/tmp/nested_function_test_9s1k_5af/small_utils.ts": {
    "language": "typescript",
    "id": 85371523,
    "file_path": "/tmp/nested_function_test_9s1k_5af/small_utils.ts",
    "content_hash": "37f5f35934c0a63e2ff5127b44b3c4cbdf9e428b7f28c94ea2da04c5b9bf3fc2",
    "blocks": [
      {
        "id": 85371524,
        "type": "function",
        "name": "formatString",
        "content": "static formatString(input: string): string {\n        return input.trim().toLowerCase();\n    }",
        "symbols": [],
        "start_line": 4,
        "end_line": 6,
        "start_col": 4,
        "end_col": 5,
        "children": []
      },
      {
        "id": 85371525,
        "type": "function",
        "name": "calculateSum",
        "content": "static calculateSum(numbers: number[]): number {\n        return numbers.reduce((sum, num) => sum + num, 0);\n    }",
        "symbols": [],
        "start_line": 8,
        "end_line": 10,
        "start_col": 4,
        "end_col": 5,
        "children": []
      },
      {
        "id": 85371526,
        "type": "function",
        "name": "anonymous",
        "content": "(sum, num) => sum + num",
        "symbols": [],
        "start_line": 9,
        "end_line": 9,
        "start_col": 30,
        "end_col": 53,
        "children": []
      },
      {
        "id": 85371527,
        "type": "function",
        "name": "isValidEmail",
        "content": "static isValidEmail(email: string): boolean {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }",
        "symbols": [],
        "start_line": 12,
        "end_line": 15,
        "start_col": 4,
        "end_col": 5,
        "children": []
      },
      {
        "id": 85371528,
        "type": "function",
        "name": "quickSort",
        "content": "function quickSort(arr: number[]): number[] {\n    if (arr.length <= 1) return arr;\n    \n    const pivot = arr[Math.floor(arr.length / 2)];\n    const left = arr.filter(x => x < pivot);\n    const right = arr.filter(x => x > pivot);\n    \n    return [...quickSort(left), pivot, ...quickSort(right)];\n}",
        "symbols": [],
        "start_line": 18,
        "end_line": 26,
        "start_col": 0,
        "end_col": 1,
        "children": []
      },
      {
        "id": 85371529,
        "type": "function",
        "name": "anonymous",
        "content": "x => x < pivot",
        "symbols": [],
        "start_line": 22,
        "end_line": 22,
        "start_col": 28,
        "end_col": 42,
        "children": []
      },
      {
        "id": 85371530,
        "type": "function",
        "name": "anonymous",
        "content": "x => x > pivot",
        "symbols": [],
        "start_line": 23,
        "end_line": 23,
        "start_col": 29,
        "end_col": 43,
        "children": []
      },
      {
        "id": 85371531,
        "type": "class",
        "name": "SimpleUtils",
        "content": "",
        "symbols": [],
        "start_line": 3,
        "end_line": 16,
        "start_col": 7,
        "end_col": 1,
        "children": [
          {
            "id": 85371532,
            "type": "function",
            "name": "formatString",
            "content": "static formatString(input: string): string {\n        return input.trim().toLowerCase();\n    }",
            "symbols": [],
            "start_line": 4,
            "end_line": 6,
            "start_col": 4,
            "end_col": 5,
            "children": []
          },
          {
            "id": 85371533,
            "type": "function",
            "name": "calculateSum",
            "content": "static calculateSum(numbers: number[]): number {\n        return numbers.reduce((sum, num) => sum + num, 0);\n    }",
            "symbols": [],
            "start_line": 8,
            "end_line": 10,
            "start_col": 4,
            "end_col": 5,
            "children": []
          },
          {
            "id": 85371534,
            "type": "function",
            "name": "isValidEmail",
            "content": "static isValidEmail(email: string): boolean {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }",
            "symbols": [],
            "start_line": 12,
            "end_line": 15,
            "start_col": 4,
            "end_col": 5,
            "children": []
          }
        ]
      }
    ],
    "relationships": []
  },
  "/tmp/nested_function_test_9s1k_5af/large_analyzer.py": {
    "language": "python",
    "id": 542127011,
    "file_path": "/tmp/nested_function_test_9s1k_5af/large_analyzer.py",
    "content_hash": "b1602b6ba00c3aca4d0ea71befedd1f65e62f214232f559ac794a713d5b6a4ac",
    "blocks": [
      {
        "id": 542127012,
        "type": "import",
        "name": "json",
        "content": "import json",
        "symbols": [],
        "start_line": 3,
        "end_line": 3,
        "start_col": 0,
        "end_col": 11,
        "children": []
      },
      {
        "id": 542127013,
        "type": "import",
        "name": "hashlib",
        "content": "import hashlib",
        "symbols": [],
        "start_line": 4,
        "end_line": 4,
        "start_col": 0,
        "end_col": 14,
        "children": []
      },
      {
        "id": 542127014,
        "type": "import",
        "name": "typing",
        "content": "from typing import Dict, List, Any, Optional",
        "symbols": [],
        "start_line": 5,
        "end_line": 5,
        "start_col": 0,
        "end_col": 44,
        "children": []
      },
      {
        "id": 542127015,
        "type": "import",
        "name": "datetime",
        "content": "from datetime import datetime",
        "symbols": [],
        "start_line": 6,
        "end_line": 6,
        "start_col": 0,
        "end_col": 29,
        "children": []
      },
      {
        "id": 542127016,
        "type": "function",
        "name": "__init__",
        "content": "def __init__(self):\n        self.data = []\n        self.results = {}",
        "symbols": [],
        "start_line": 9,
        "end_line": 11,
        "start_col": 4,
        "end_col": 25,
        "children": []
      },
      {
        "id": 542127017,
        "type": "function",
        "name": "validate_input",
        "content": "def validate_input(self, data: Any) -> bool:\n        \"\"\"Validate input data.\"\"\"\n        return data is not None and len(str(data)) > 0",
        "symbols": [],
        "start_line": 14,
        "end_line": 16,
        "start_col": 4,
        "end_col": 54,
        "children": []
      },
      {
        "id": 542127022,
        "type": "function",
        "name": "analyze_complex_dataset",
        "content": "def analyze_complex_dataset(self, dataset: List[Dict]) -> Dict[str, Any]:\n        \"\"\"Analyze a complex dataset with multiple processing steps.\"\"\"\n        analysis_results = {\n            'processed_data': [],\n            'statistics': {},\n            'anomalies': [],\n            'recommendations': []\n        }\n        \n        def preprocess_data(raw_data: List[Dict]) -> List[Dict]:\n    # [BLOCK_REF:542127018]\n        \n        def detect_anomalies(data: List[Dict]) -> List[Dict]:\n    # [BLOCK_REF:542127019]\n        \n        def calculate_advanced_statistics(data: List[Dict]) -> Dict[str, Any]:\n    # [BLOCK_REF:542127020]\n        \n        def generate_recommendations(data: List[Dict], stats: Dict, anomalies: List[Dict]) -> List[str]:\n    # [BLOCK_REF:542127021]\n        \n        # Analysis step 1\n        # Analysis step 2\n        # Analysis step 3\n        # Analysis step 4\n        # Analysis step 5\n        # Analysis step 6\n        # Analysis step 7\n        # Analysis step 8\n        # Analysis step 9\n        # Analysis step 10\n        # Analysis step 11\n        # Analysis step 12\n        # Analysis step 13\n        # Analysis step 14\n        # Analysis step 15\n        # Analysis step 16\n        # Analysis step 17\n        # Analysis step 18\n        # Analysis step 19\n        # Analysis step 20\n        # Analysis step 21\n        # Analysis step 22\n        # Analysis step 23\n        # Analysis step 24\n        # Analysis step 25\n        # Analysis step 26\n        # Analysis step 27\n        # Analysis step 28\n        # Analysis step 29\n        # Analysis step 30\n        # Analysis step 31\n        # Analysis step 32\n        # Analysis step 33\n        # Analysis step 34\n        # Analysis step 35\n        # Analysis step 36\n        # Analysis step 37\n        # Analysis step 38\n        # Analysis step 39\n        # Analysis step 40\n        # Analysis step 41\n        # Analysis step 42\n        # Analysis step 43\n        # Analysis step 44\n        # Analysis step 45\n        # Analysis step 46\n        # Analysis step 47\n        # Analysis step 48\n        # Analysis step 49\n        # Analysis step 50\n        # Analysis step 51\n        # Analysis step 52\n        # Analysis step 53\n        # Analysis step 54\n        # Analysis step 55\n        # Analysis step 56\n        # Analysis step 57\n        # Analysis step 58\n        # Analysis step 59\n        # Analysis step 60\n        # Analysis step 61\n        # Analysis step 62\n        # Analysis step 63\n        # Analysis step 64\n        # Analysis step 65\n        # Analysis step 66\n        # Analysis step 67\n        # Analysis step 68\n        # Analysis step 69\n        # Analysis step 70\n        # Analysis step 71\n        # Analysis step 72\n        # Analysis step 73\n        # Analysis step 74\n        # Analysis step 75\n        # Analysis step 76\n        # Analysis step 77\n        # Analysis step 78\n        # Analysis step 79\n        # Analysis step 80\n        # Analysis step 81\n        # Analysis step 82\n        # Analysis step 83\n        # Analysis step 84\n        # Analysis step 85\n        # Analysis step 86\n        # Analysis step 87\n        # Analysis step 88\n        # Analysis step 89\n        # Analysis step 90\n        # Analysis step 91\n        # Analysis step 92\n        # Analysis step 93\n        # Analysis step 94\n        # Analysis step 95\n        # Analysis step 96\n        # Analysis step 97\n        # Analysis step 98\n        # Analysis step 99\n        # Analysis step 100\n        # Analysis step 101\n        # Analysis step 102\n        # Analysis step 103\n        # Analysis step 104\n        # Analysis step 105\n        # Analysis step 106\n        # Analysis step 107\n        # Analysis step 108\n        # Analysis step 109\n        # Analysis step 110\n        # Analysis step 111\n        # Analysis step 112\n        # Analysis step 113\n        # Analysis step 114\n        # Analysis step 115\n        # Analysis step 116\n        # Analysis step 117\n        # Analysis step 118\n        # Analysis step 119\n        # Analysis step 120\n        # Analysis step 121\n        # Analysis step 122\n        # Analysis step 123\n        # Analysis step 124\n        # Analysis step 125\n        # Analysis step 126\n        # Analysis step 127\n        # Analysis step 128\n        # Analysis step 129\n        # Analysis step 130\n        # Analysis step 131\n        # Analysis step 132\n        # Analysis step 133\n        # Analysis step 134\n        # Analysis step 135\n        # Analysis step 136\n        # Analysis step 137\n        # Analysis step 138\n        # Analysis step 139\n        # Analysis step 140\n        # Analysis step 141\n        # Analysis step 142\n        # Analysis step 143\n        # Analysis step 144\n        # Analysis step 145\n        # Analysis step 146\n        # Analysis step 147\n        # Analysis step 148\n        # Analysis step 149\n        # Analysis step 150\n        # Analysis step 151\n        # Analysis step 152\n        # Analysis step 153\n        # Analysis step 154\n        # Analysis step 155\n        # Analysis step 156\n        # Analysis step 157\n        # Analysis step 158\n        # Analysis step 159\n        # Analysis step 160\n        # Analysis step 161\n        # Analysis step 162\n        # Analysis step 163\n        # Analysis step 164\n        # Analysis step 165\n        # Analysis step 166\n        # Analysis step 167\n        # Analysis step 168\n        # Analysis step 169\n        # Analysis step 170\n        # Analysis step 171\n        # Analysis step 172\n        # Analysis step 173\n        # Analysis step 174\n        # Analysis step 175\n        # Analysis step 176\n        # Analysis step 177\n        # Analysis step 178\n        # Analysis step 179\n        # Analysis step 180\n        # Analysis step 181\n        # Analysis step 182\n        # Analysis step 183\n        # Analysis step 184\n        # Analysis step 185\n        # Analysis step 186\n        # Analysis step 187\n        # Analysis step 188\n        # Analysis step 189\n        # Analysis step 190\n        # Analysis step 191\n        # Analysis step 192\n        # Analysis step 193\n        # Analysis step 194\n        # Analysis step 195\n        # Analysis step 196\n        # Analysis step 197\n        # Analysis step 198\n        # Analysis step 199\n        \n        # Main analysis workflow\n        try:\n            # Step 1: Preprocess the data\n            processed_data = preprocess_data(dataset)\n            \n            # Step 2: Detect anomalies\n            anomalies = detect_anomalies(processed_data)\n            \n            # Step 3: Calculate statistics\n            statistics = calculate_advanced_statistics(processed_data)\n            \n            # Step 4: Generate recommendations\n            recommendations = generate_recommendations(processed_data, statistics, anomalies)\n            \n            # Compile results\n            analysis_results.update({\n                'processed_data': processed_data,\n                'statistics': statistics,\n                'anomalies': anomalies,\n                'recommendations': recommendations,\n                'processing_timestamp': datetime.now().isoformat(),\n                'data_quality_score': max(0, 100 - (len(anomalies) / len(processed_data) * 100)) if processed_data else 0\n            })\n            \n            return analysis_results\n            \n        except Exception as e:\n            return {\n                'error': str(e),\n                'processed_data': [],\n                'statistics': {},\n                'anomalies': [],\n                'recommendations': [f\"Analysis failed: {str(e)}\"]\n            }",
        "symbols": [],
        "start_line": 19,
        "end_line": 368,
        "start_col": 4,
        "end_col": 13,
        "children": [
          {
            "id": 542127018,
            "type": "function",
            "name": "preprocess_data",
            "content": "def preprocess_data(raw_data: List[Dict]) -> List[Dict]:\n            \"\"\"Clean and preprocess the raw data.\"\"\"\n            processed = []\n            for item in raw_data:\n                if not item or not isinstance(item, dict):\n                    continue\n                \n                cleaned_item = {\n                    'id': item.get('id', self._generate_id()),\n                    'value': float(item.get('value', 0)),\n                    'category': str(item.get('category', 'unknown')).lower(),\n                    'timestamp': item.get('timestamp', datetime.now().isoformat()),\n                    'metadata': item.get('metadata', {})\n                }\n                \n                # Additional cleaning\n                if cleaned_item['value'] < 0:\n                    cleaned_item['value'] = abs(cleaned_item['value'])\n                    cleaned_item['metadata']['was_negative'] = True\n                \n                processed.append(cleaned_item)\n            \n            return processed",
            "symbols": [],
            "start_line": 28,
            "end_line": 50,
            "start_col": 8,
            "end_col": 28,
            "children": []
          },
          {
            "id": 542127019,
            "type": "function",
            "name": "detect_anomalies",
            "content": "def detect_anomalies(data: List[Dict]) -> List[Dict]:\n            \"\"\"Detect anomalies in the dataset.\"\"\"\n            anomalies = []\n            if not data:\n                return anomalies\n            \n            values = [item['value'] for item in data]\n            mean_val = sum(values) / len(values)\n            std_dev = (sum((x - mean_val) ** 2 for x in values) / len(values)) ** 0.5\n            \n            threshold = mean_val + (2 * std_dev)\n            \n            for item in data:\n                if item['value'] > threshold:\n                    anomalies.append({\n                        'item_id': item['id'],\n                        'value': item['value'],\n                        'threshold': threshold,\n                        'deviation': item['value'] - mean_val,\n                        'type': 'statistical_outlier'\n                    })\n            \n            return anomalies",
            "symbols": [],
            "start_line": 52,
            "end_line": 74,
            "start_col": 8,
            "end_col": 28,
            "children": []
          },
          {
            "id": 542127020,
            "type": "function",
            "name": "calculate_advanced_statistics",
            "content": "def calculate_advanced_statistics(data: List[Dict]) -> Dict[str, Any]:\n            \"\"\"Calculate comprehensive statistics.\"\"\"\n            if not data:\n                return {}\n            \n            values = [item['value'] for item in data]\n            categories = {}\n            \n            for item in data:\n                cat = item['category']\n                if cat not in categories:\n                    categories[cat] = []\n                categories[cat].append(item['value'])\n            \n            stats = {\n                'total_items': len(data),\n                'total_value': sum(values),\n                'mean': sum(values) / len(values),\n                'median': sorted(values)[len(values) // 2],\n                'min': min(values),\n                'max': max(values),\n                'categories': {}\n            }\n            \n            # Category-specific statistics\n            for cat, cat_values in categories.items():\n                stats['categories'][cat] = {\n                    'count': len(cat_values),\n                    'mean': sum(cat_values) / len(cat_values),\n                    'total': sum(cat_values),\n                    'percentage': (len(cat_values) / len(data)) * 100\n                }\n            \n            return stats",
            "symbols": [],
            "start_line": 76,
            "end_line": 109,
            "start_col": 8,
            "end_col": 24,
            "children": []
          },
          {
            "id": 542127021,
            "type": "function",
            "name": "generate_recommendations",
            "content": "def generate_recommendations(data: List[Dict], stats: Dict, anomalies: List[Dict]) -> List[str]:\n            \"\"\"Generate recommendations based on analysis.\"\"\"\n            recommendations = []\n            \n            if not data:\n                recommendations.append(\"No data available for analysis\")\n                return recommendations\n            \n            # Data quality recommendations\n            if len(anomalies) > len(data) * 0.1:\n                recommendations.append(\"High number of anomalies detected - consider data quality review\")\n            \n            # Category distribution recommendations\n            if 'categories' in stats:\n                category_counts = [cat_stats['count'] for cat_stats in stats['categories'].values()]\n                if max(category_counts) > len(data) * 0.8:\n                    recommendations.append(\"Data heavily skewed towards one category - consider balancing\")\n            \n            # Value range recommendations\n            if stats.get('max', 0) > stats.get('mean', 0) * 10:\n                recommendations.append(\"Large value range detected - consider normalization\")\n            \n            return recommendations",
            "symbols": [],
            "start_line": 111,
            "end_line": 133,
            "start_col": 8,
            "end_col": 34,
            "children": []
          }
        ]
      },
      {
        "id": 542127023,
        "type": "function",
        "name": "preprocess_data",
        "content": "def preprocess_data(raw_data: List[Dict]) -> List[Dict]:\n            \"\"\"Clean and preprocess the raw data.\"\"\"\n            processed = []\n            for item in raw_data:\n                if not item or not isinstance(item, dict):\n                    continue\n                \n                cleaned_item = {\n                    'id': item.get('id', self._generate_id()),\n                    'value': float(item.get('value', 0)),\n                    'category': str(item.get('category', 'unknown')).lower(),\n                    'timestamp': item.get('timestamp', datetime.now().isoformat()),\n                    'metadata': item.get('metadata', {})\n                }\n                \n                # Additional cleaning\n                if cleaned_item['value'] < 0:\n                    cleaned_item['value'] = abs(cleaned_item['value'])\n                    cleaned_item['metadata']['was_negative'] = True\n                \n                processed.append(cleaned_item)\n            \n            return processed",
        "symbols": [],
        "start_line": 28,
        "end_line": 50,
        "start_col": 8,
        "end_col": 28,
        "children": []
      },
      {
        "id": 542127024,
        "type": "function",
        "name": "detect_anomalies",
        "content": "def detect_anomalies(data: List[Dict]) -> List[Dict]:\n            \"\"\"Detect anomalies in the dataset.\"\"\"\n            anomalies = []\n            if not data:\n                return anomalies\n            \n            values = [item['value'] for item in data]\n            mean_val = sum(values) / len(values)\n            std_dev = (sum((x - mean_val) ** 2 for x in values) / len(values)) ** 0.5\n            \n            threshold = mean_val + (2 * std_dev)\n            \n            for item in data:\n                if item['value'] > threshold:\n                    anomalies.append({\n                        'item_id': item['id'],\n                        'value': item['value'],\n                        'threshold': threshold,\n                        'deviation': item['value'] - mean_val,\n                        'type': 'statistical_outlier'\n                    })\n            \n            return anomalies",
        "symbols": [],
        "start_line": 52,
        "end_line": 74,
        "start_col": 8,
        "end_col": 28,
        "children": []
      },
      {
        "id": 542127025,
        "type": "function",
        "name": "calculate_advanced_statistics",
        "content": "def calculate_advanced_statistics(data: List[Dict]) -> Dict[str, Any]:\n            \"\"\"Calculate comprehensive statistics.\"\"\"\n            if not data:\n                return {}\n            \n            values = [item['value'] for item in data]\n            categories = {}\n            \n            for item in data:\n                cat = item['category']\n                if cat not in categories:\n                    categories[cat] = []\n                categories[cat].append(item['value'])\n            \n            stats = {\n                'total_items': len(data),\n                'total_value': sum(values),\n                'mean': sum(values) / len(values),\n                'median': sorted(values)[len(values) // 2],\n                'min': min(values),\n                'max': max(values),\n                'categories': {}\n            }\n            \n            # Category-specific statistics\n            for cat, cat_values in categories.items():\n                stats['categories'][cat] = {\n                    'count': len(cat_values),\n                    'mean': sum(cat_values) / len(cat_values),\n                    'total': sum(cat_values),\n                    'percentage': (len(cat_values) / len(data)) * 100\n                }\n            \n            return stats",
        "symbols": [],
        "start_line": 76,
        "end_line": 109,
        "start_col": 8,
        "end_col": 24,
        "children": []
      },
      {
        "id": 542127026,
        "type": "function",
        "name": "generate_recommendations",
        "content": "def generate_recommendations(data: List[Dict], stats: Dict, anomalies: List[Dict]) -> List[str]:\n            \"\"\"Generate recommendations based on analysis.\"\"\"\n            recommendations = []\n            \n            if not data:\n                recommendations.append(\"No data available for analysis\")\n                return recommendations\n            \n            # Data quality recommendations\n            if len(anomalies) > len(data) * 0.1:\n                recommendations.append(\"High number of anomalies detected - consider data quality review\")\n            \n            # Category distribution recommendations\n            if 'categories' in stats:\n                category_counts = [cat_stats['count'] for cat_stats in stats['categories'].values()]\n                if max(category_counts) > len(data) * 0.8:\n                    recommendations.append(\"Data heavily skewed towards one category - consider balancing\")\n            \n            # Value range recommendations\n            if stats.get('max', 0) > stats.get('mean', 0) * 10:\n                recommendations.append(\"Large value range detected - consider normalization\")\n            \n            return recommendations",
        "symbols": [],
        "start_line": 111,
        "end_line": 133,
        "start_col": 8,
        "end_col": 34,
        "children": []
      },
      {
        "id": 542127027,
        "type": "function",
        "name": "_generate_id",
        "content": "def _generate_id(self) -> str:\n        \"\"\"Generate a unique ID.\"\"\"\n        return hashlib.md5(str(datetime.now()).encode()).hexdigest()[:8]",
        "symbols": [],
        "start_line": 370,
        "end_line": 372,
        "start_col": 4,
        "end_col": 72,
        "children": []
      },
      {
        "id": 542127028,
        "type": "function",
        "name": "simple_helper",
        "content": "def simple_helper(value: str) -> str:\n    \"\"\"Simple helper function.\"\"\"\n    return value.upper().strip()",
        "symbols": [],
        "start_line": 375,
        "end_line": 377,
        "start_col": 0,
        "end_col": 32,
        "children": []
      },
      {
        "id": 542127029,
        "type": "class",
        "name": "DataAnalyzer",
        "content": "",
        "symbols": [],
        "start_line": 8,
        "end_line": 372,
        "start_col": 0,
        "end_col": 72,
        "children": [
          {
            "id": 542127030,
            "type": "function",
            "name": "__init__",
            "content": "def __init__(self):\n        self.data = []\n        self.results = {}",
            "symbols": [],
            "start_line": 9,
            "end_line": 11,
            "start_col": 4,
            "end_col": 25,
            "children": []
          },
          {
            "id": 542127031,
            "type": "function",
            "name": "validate_input",
            "content": "def validate_input(self, data: Any) -> bool:\n        \"\"\"Validate input data.\"\"\"\n        return data is not None and len(str(data)) > 0",
            "symbols": [],
            "start_line": 14,
            "end_line": 16,
            "start_col": 4,
            "end_col": 54,
            "children": []
          },
          {
            "id": 542127036,
            "type": "function",
            "name": "analyze_complex_dataset",
            "content": "def analyze_complex_dataset(self, dataset: List[Dict]) -> Dict[str, Any]:\n        \"\"\"Analyze a complex dataset with multiple processing steps.\"\"\"\n        analysis_results = {\n            'processed_data': [],\n            'statistics': {},\n            'anomalies': [],\n            'recommendations': []\n        }\n        \n        def preprocess_data(raw_data: List[Dict]) -> List[Dict]:\n    # [BLOCK_REF:542127032]\n        \n        def detect_anomalies(data: List[Dict]) -> List[Dict]:\n    # [BLOCK_REF:542127033]\n        \n        def calculate_advanced_statistics(data: List[Dict]) -> Dict[str, Any]:\n    # [BLOCK_REF:542127034]\n        \n        def generate_recommendations(data: List[Dict], stats: Dict, anomalies: List[Dict]) -> List[str]:\n    # [BLOCK_REF:542127035]\n        \n        # Analysis step 1\n        # Analysis step 2\n        # Analysis step 3\n        # Analysis step 4\n        # Analysis step 5\n        # Analysis step 6\n        # Analysis step 7\n        # Analysis step 8\n        # Analysis step 9\n        # Analysis step 10\n        # Analysis step 11\n        # Analysis step 12\n        # Analysis step 13\n        # Analysis step 14\n        # Analysis step 15\n        # Analysis step 16\n        # Analysis step 17\n        # Analysis step 18\n        # Analysis step 19\n        # Analysis step 20\n        # Analysis step 21\n        # Analysis step 22\n        # Analysis step 23\n        # Analysis step 24\n        # Analysis step 25\n        # Analysis step 26\n        # Analysis step 27\n        # Analysis step 28\n        # Analysis step 29\n        # Analysis step 30\n        # Analysis step 31\n        # Analysis step 32\n        # Analysis step 33\n        # Analysis step 34\n        # Analysis step 35\n        # Analysis step 36\n        # Analysis step 37\n        # Analysis step 38\n        # Analysis step 39\n        # Analysis step 40\n        # Analysis step 41\n        # Analysis step 42\n        # Analysis step 43\n        # Analysis step 44\n        # Analysis step 45\n        # Analysis step 46\n        # Analysis step 47\n        # Analysis step 48\n        # Analysis step 49\n        # Analysis step 50\n        # Analysis step 51\n        # Analysis step 52\n        # Analysis step 53\n        # Analysis step 54\n        # Analysis step 55\n        # Analysis step 56\n        # Analysis step 57\n        # Analysis step 58\n        # Analysis step 59\n        # Analysis step 60\n        # Analysis step 61\n        # Analysis step 62\n        # Analysis step 63\n        # Analysis step 64\n        # Analysis step 65\n        # Analysis step 66\n        # Analysis step 67\n        # Analysis step 68\n        # Analysis step 69\n        # Analysis step 70\n        # Analysis step 71\n        # Analysis step 72\n        # Analysis step 73\n        # Analysis step 74\n        # Analysis step 75\n        # Analysis step 76\n        # Analysis step 77\n        # Analysis step 78\n        # Analysis step 79\n        # Analysis step 80\n        # Analysis step 81\n        # Analysis step 82\n        # Analysis step 83\n        # Analysis step 84\n        # Analysis step 85\n        # Analysis step 86\n        # Analysis step 87\n        # Analysis step 88\n        # Analysis step 89\n        # Analysis step 90\n        # Analysis step 91\n        # Analysis step 92\n        # Analysis step 93\n        # Analysis step 94\n        # Analysis step 95\n        # Analysis step 96\n        # Analysis step 97\n        # Analysis step 98\n        # Analysis step 99\n        # Analysis step 100\n        # Analysis step 101\n        # Analysis step 102\n        # Analysis step 103\n        # Analysis step 104\n        # Analysis step 105\n        # Analysis step 106\n        # Analysis step 107\n        # Analysis step 108\n        # Analysis step 109\n        # Analysis step 110\n        # Analysis step 111\n        # Analysis step 112\n        # Analysis step 113\n        # Analysis step 114\n        # Analysis step 115\n        # Analysis step 116\n        # Analysis step 117\n        # Analysis step 118\n        # Analysis step 119\n        # Analysis step 120\n        # Analysis step 121\n        # Analysis step 122\n        # Analysis step 123\n        # Analysis step 124\n        # Analysis step 125\n        # Analysis step 126\n        # Analysis step 127\n        # Analysis step 128\n        # Analysis step 129\n        # Analysis step 130\n        # Analysis step 131\n        # Analysis step 132\n        # Analysis step 133\n        # Analysis step 134\n        # Analysis step 135\n        # Analysis step 136\n        # Analysis step 137\n        # Analysis step 138\n        # Analysis step 139\n        # Analysis step 140\n        # Analysis step 141\n        # Analysis step 142\n        # Analysis step 143\n        # Analysis step 144\n        # Analysis step 145\n        # Analysis step 146\n        # Analysis step 147\n        # Analysis step 148\n        # Analysis step 149\n        # Analysis step 150\n        # Analysis step 151\n        # Analysis step 152\n        # Analysis step 153\n        # Analysis step 154\n        # Analysis step 155\n        # Analysis step 156\n        # Analysis step 157\n        # Analysis step 158\n        # Analysis step 159\n        # Analysis step 160\n        # Analysis step 161\n        # Analysis step 162\n        # Analysis step 163\n        # Analysis step 164\n        # Analysis step 165\n        # Analysis step 166\n        # Analysis step 167\n        # Analysis step 168\n        # Analysis step 169\n        # Analysis step 170\n        # Analysis step 171\n        # Analysis step 172\n        # Analysis step 173\n        # Analysis step 174\n        # Analysis step 175\n        # Analysis step 176\n        # Analysis step 177\n        # Analysis step 178\n        # Analysis step 179\n        # Analysis step 180\n        # Analysis step 181\n        # Analysis step 182\n        # Analysis step 183\n        # Analysis step 184\n        # Analysis step 185\n        # Analysis step 186\n        # Analysis step 187\n        # Analysis step 188\n        # Analysis step 189\n        # Analysis step 190\n        # Analysis step 191\n        # Analysis step 192\n        # Analysis step 193\n        # Analysis step 194\n        # Analysis step 195\n        # Analysis step 196\n        # Analysis step 197\n        # Analysis step 198\n        # Analysis step 199\n        \n        # Main analysis workflow\n        try:\n            # Step 1: Preprocess the data\n            processed_data = preprocess_data(dataset)\n            \n            # Step 2: Detect anomalies\n            anomalies = detect_anomalies(processed_data)\n            \n            # Step 3: Calculate statistics\n            statistics = calculate_advanced_statistics(processed_data)\n            \n            # Step 4: Generate recommendations\n            recommendations = generate_recommendations(processed_data, statistics, anomalies)\n            \n            # Compile results\n            analysis_results.update({\n                'processed_data': processed_data,\n                'statistics': statistics,\n                'anomalies': anomalies,\n                'recommendations': recommendations,\n                'processing_timestamp': datetime.now().isoformat(),\n                'data_quality_score': max(0, 100 - (len(anomalies) / len(processed_data) * 100)) if processed_data else 0\n            })\n            \n            return analysis_results\n            \n        except Exception as e:\n            return {\n                'error': str(e),\n                'processed_data': [],\n                'statistics': {},\n                'anomalies': [],\n                'recommendations': [f\"Analysis failed: {str(e)}\"]\n            }",
            "symbols": [],
            "start_line": 19,
            "end_line": 368,
            "start_col": 4,
            "end_col": 13,
            "children": [
              {
                "id": 542127032,
                "type": "function",
                "name": "preprocess_data",
                "content": "def preprocess_data(raw_data: List[Dict]) -> List[Dict]:\n            \"\"\"Clean and preprocess the raw data.\"\"\"\n            processed = []\n            for item in raw_data:\n                if not item or not isinstance(item, dict):\n                    continue\n                \n                cleaned_item = {\n                    'id': item.get('id', self._generate_id()),\n                    'value': float(item.get('value', 0)),\n                    'category': str(item.get('category', 'unknown')).lower(),\n                    'timestamp': item.get('timestamp', datetime.now().isoformat()),\n                    'metadata': item.get('metadata', {})\n                }\n                \n                # Additional cleaning\n                if cleaned_item['value'] < 0:\n                    cleaned_item['value'] = abs(cleaned_item['value'])\n                    cleaned_item['metadata']['was_negative'] = True\n                \n                processed.append(cleaned_item)\n            \n            return processed",
                "symbols": [],
                "start_line": 28,
                "end_line": 50,
                "start_col": 8,
                "end_col": 28,
                "children": []
              },
              {
                "id": 542127033,
                "type": "function",
                "name": "detect_anomalies",
                "content": "def detect_anomalies(data: List[Dict]) -> List[Dict]:\n            \"\"\"Detect anomalies in the dataset.\"\"\"\n            anomalies = []\n            if not data:\n                return anomalies\n            \n            values = [item['value'] for item in data]\n            mean_val = sum(values) / len(values)\n            std_dev = (sum((x - mean_val) ** 2 for x in values) / len(values)) ** 0.5\n            \n            threshold = mean_val + (2 * std_dev)\n            \n            for item in data:\n                if item['value'] > threshold:\n                    anomalies.append({\n                        'item_id': item['id'],\n                        'value': item['value'],\n                        'threshold': threshold,\n                        'deviation': item['value'] - mean_val,\n                        'type': 'statistical_outlier'\n                    })\n            \n            return anomalies",
                "symbols": [],
                "start_line": 52,
                "end_line": 74,
                "start_col": 8,
                "end_col": 28,
                "children": []
              },
              {
                "id": 542127034,
                "type": "function",
                "name": "calculate_advanced_statistics",
                "content": "def calculate_advanced_statistics(data: List[Dict]) -> Dict[str, Any]:\n            \"\"\"Calculate comprehensive statistics.\"\"\"\n            if not data:\n                return {}\n            \n            values = [item['value'] for item in data]\n            categories = {}\n            \n            for item in data:\n                cat = item['category']\n                if cat not in categories:\n                    categories[cat] = []\n                categories[cat].append(item['value'])\n            \n            stats = {\n                'total_items': len(data),\n                'total_value': sum(values),\n                'mean': sum(values) / len(values),\n                'median': sorted(values)[len(values) // 2],\n                'min': min(values),\n                'max': max(values),\n                'categories': {}\n            }\n            \n            # Category-specific statistics\n            for cat, cat_values in categories.items():\n                stats['categories'][cat] = {\n                    'count': len(cat_values),\n                    'mean': sum(cat_values) / len(cat_values),\n                    'total': sum(cat_values),\n                    'percentage': (len(cat_values) / len(data)) * 100\n                }\n            \n            return stats",
                "symbols": [],
                "start_line": 76,
                "end_line": 109,
                "start_col": 8,
                "end_col": 24,
                "children": []
              },
              {
                "id": 542127035,
                "type": "function",
                "name": "generate_recommendations",
                "content": "def generate_recommendations(data: List[Dict], stats: Dict, anomalies: List[Dict]) -> List[str]:\n            \"\"\"Generate recommendations based on analysis.\"\"\"\n            recommendations = []\n            \n            if not data:\n                recommendations.append(\"No data available for analysis\")\n                return recommendations\n            \n            # Data quality recommendations\n            if len(anomalies) > len(data) * 0.1:\n                recommendations.append(\"High number of anomalies detected - consider data quality review\")\n            \n            # Category distribution recommendations\n            if 'categories' in stats:\n                category_counts = [cat_stats['count'] for cat_stats in stats['categories'].values()]\n                if max(category_counts) > len(data) * 0.8:\n                    recommendations.append(\"Data heavily skewed towards one category - consider balancing\")\n            \n            # Value range recommendations\n            if stats.get('max', 0) > stats.get('mean', 0) * 10:\n                recommendations.append(\"Large value range detected - consider normalization\")\n            \n            return recommendations",
                "symbols": [],
                "start_line": 111,
                "end_line": 133,
                "start_col": 8,
                "end_col": 34,
                "children": []
              }
            ]
          },
          {
            "id": 542127037,
            "type": "function",
            "name": "preprocess_data",
            "content": "def preprocess_data(raw_data: List[Dict]) -> List[Dict]:\n            \"\"\"Clean and preprocess the raw data.\"\"\"\n            processed = []\n            for item in raw_data:\n                if not item or not isinstance(item, dict):\n                    continue\n                \n                cleaned_item = {\n                    'id': item.get('id', self._generate_id()),\n                    'value': float(item.get('value', 0)),\n                    'category': str(item.get('category', 'unknown')).lower(),\n                    'timestamp': item.get('timestamp', datetime.now().isoformat()),\n                    'metadata': item.get('metadata', {})\n                }\n                \n                # Additional cleaning\n                if cleaned_item['value'] < 0:\n                    cleaned_item['value'] = abs(cleaned_item['value'])\n                    cleaned_item['metadata']['was_negative'] = True\n                \n                processed.append(cleaned_item)\n            \n            return processed",
            "symbols": [],
            "start_line": 28,
            "end_line": 50,
            "start_col": 8,
            "end_col": 28,
            "children": []
          },
          {
            "id": 542127038,
            "type": "function",
            "name": "detect_anomalies",
            "content": "def detect_anomalies(data: List[Dict]) -> List[Dict]:\n            \"\"\"Detect anomalies in the dataset.\"\"\"\n            anomalies = []\n            if not data:\n                return anomalies\n            \n            values = [item['value'] for item in data]\n            mean_val = sum(values) / len(values)\n            std_dev = (sum((x - mean_val) ** 2 for x in values) / len(values)) ** 0.5\n            \n            threshold = mean_val + (2 * std_dev)\n            \n            for item in data:\n                if item['value'] > threshold:\n                    anomalies.append({\n                        'item_id': item['id'],\n                        'value': item['value'],\n                        'threshold': threshold,\n                        'deviation': item['value'] - mean_val,\n                        'type': 'statistical_outlier'\n                    })\n            \n            return anomalies",
            "symbols": [],
            "start_line": 52,
            "end_line": 74,
            "start_col": 8,
            "end_col": 28,
            "children": []
          },
          {
            "id": 542127039,
            "type": "function",
            "name": "calculate_advanced_statistics",
            "content": "def calculate_advanced_statistics(data: List[Dict]) -> Dict[str, Any]:\n            \"\"\"Calculate comprehensive statistics.\"\"\"\n            if not data:\n                return {}\n            \n            values = [item['value'] for item in data]\n            categories = {}\n            \n            for item in data:\n                cat = item['category']\n                if cat not in categories:\n                    categories[cat] = []\n                categories[cat].append(item['value'])\n            \n            stats = {\n                'total_items': len(data),\n                'total_value': sum(values),\n                'mean': sum(values) / len(values),\n                'median': sorted(values)[len(values) // 2],\n                'min': min(values),\n                'max': max(values),\n                'categories': {}\n            }\n            \n            # Category-specific statistics\n            for cat, cat_values in categories.items():\n                stats['categories'][cat] = {\n                    'count': len(cat_values),\n                    'mean': sum(cat_values) / len(cat_values),\n                    'total': sum(cat_values),\n                    'percentage': (len(cat_values) / len(data)) * 100\n                }\n            \n            return stats",
            "symbols": [],
            "start_line": 76,
            "end_line": 109,
            "start_col": 8,
            "end_col": 24,
            "children": []
          },
          {
            "id": 542127040,
            "type": "function",
            "name": "generate_recommendations",
            "content": "def generate_recommendations(data: List[Dict], stats: Dict, anomalies: List[Dict]) -> List[str]:\n            \"\"\"Generate recommendations based on analysis.\"\"\"\n            recommendations = []\n            \n            if not data:\n                recommendations.append(\"No data available for analysis\")\n                return recommendations\n            \n            # Data quality recommendations\n            if len(anomalies) > len(data) * 0.1:\n                recommendations.append(\"High number of anomalies detected - consider data quality review\")\n            \n            # Category distribution recommendations\n            if 'categories' in stats:\n                category_counts = [cat_stats['count'] for cat_stats in stats['categories'].values()]\n                if max(category_counts) > len(data) * 0.8:\n                    recommendations.append(\"Data heavily skewed towards one category - consider balancing\")\n            \n            # Value range recommendations\n            if stats.get('max', 0) > stats.get('mean', 0) * 10:\n                recommendations.append(\"Large value range detected - consider normalization\")\n            \n            return recommendations",
            "symbols": [],
            "start_line": 111,
            "end_line": 133,
            "start_col": 8,
            "end_col": 34,
            "children": []
          },
          {
            "id": 542127041,
            "type": "function",
            "name": "_generate_id",
            "content": "def _generate_id(self) -> str:\n        \"\"\"Generate a unique ID.\"\"\"\n        return hashlib.md5(str(datetime.now()).encode()).hexdigest()[:8]",
            "symbols": [],
            "start_line": 370,
            "end_line": 372,
            "start_col": 4,
            "end_col": 72,
            "children": []
          }
        ]
      }
    ],
    "relationships": []
  },
  "/tmp/nested_function_test_9s1k_5af/large_processor.ts": {
    "language": "typescript",
    "id": 133462904,
    "file_path": "/tmp/nested_function_test_9s1k_5af/large_processor.ts",
    "content_hash": "e53d53235ffcc15922ace474f50e495554aa47dcc574118edf0770a620951a11",
    "blocks": [
      {
        "id": 133462905,
        "type": "function",
        "name": "validateInput",
        "content": "validateInput(input: string): boolean {\n        if (!input) return false;\n        return input.length > 0;\n    }",
        "symbols": [],
        "start_line": 7,
        "end_line": 10,
        "start_col": 4,
        "end_col": 5,
        "children": []
      },
      {
        "id": 133462911,
        "type": "function",
        "name": "processLargeDataset",
        "content": "processLargeDataset(dataset: any[]): ProcessedData {\n        const results: ProcessedData = {\n            processed: [],\n            errors: [],\n            statistics: {}\n        };\n        \n        function cleanData(rawData: any[]): any[] {\n    // [BLOCK_REF:133462906]\n}\n        \n        function validateData(data: any[]): ValidationResult {\n    // [BLOCK_REF:133462907]\n}\n        \n        function transformData(validData: any[]): any[] {\n            return validData.map(item => ({\n    // [BLOCK_REF:133462909]\n});\n        }\n        \n        function generateStatistics(data: any[]): Statistics {\n    // [BLOCK_REF:133462910]\n}\n        \n        // Processing step 1\n        // Processing step 2\n        // Processing step 3\n        // Processing step 4\n        // Processing step 5\n        // Processing step 6\n        // Processing step 7\n        // Processing step 8\n        // Processing step 9\n        // Processing step 10\n        // Processing step 11\n        // Processing step 12\n        // Processing step 13\n        // Processing step 14\n        // Processing step 15\n        // Processing step 16\n        // Processing step 17\n        // Processing step 18\n        // Processing step 19\n        // Processing step 20\n        // Processing step 21\n        // Processing step 22\n        // Processing step 23\n        // Processing step 24\n        // Processing step 25\n        // Processing step 26\n        // Processing step 27\n        // Processing step 28\n        // Processing step 29\n        // Processing step 30\n        // Processing step 31\n        // Processing step 32\n        // Processing step 33\n        // Processing step 34\n        // Processing step 35\n        // Processing step 36\n        // Processing step 37\n        // Processing step 38\n        // Processing step 39\n        // Processing step 40\n        // Processing step 41\n        // Processing step 42\n        // Processing step 43\n        // Processing step 44\n        // Processing step 45\n        // Processing step 46\n        // Processing step 47\n        // Processing step 48\n        // Processing step 49\n        // Processing step 50\n        // Processing step 51\n        // Processing step 52\n        // Processing step 53\n        // Processing step 54\n        // Processing step 55\n        // Processing step 56\n        // Processing step 57\n        // Processing step 58\n        // Processing step 59\n        // Processing step 60\n        // Processing step 61\n        // Processing step 62\n        // Processing step 63\n        // Processing step 64\n        // Processing step 65\n        // Processing step 66\n        // Processing step 67\n        // Processing step 68\n        // Processing step 69\n        // Processing step 70\n        // Processing step 71\n        // Processing step 72\n        // Processing step 73\n        // Processing step 74\n        // Processing step 75\n        // Processing step 76\n        // Processing step 77\n        // Processing step 78\n        // Processing step 79\n        // Processing step 80\n        // Processing step 81\n        // Processing step 82\n        // Processing step 83\n        // Processing step 84\n        // Processing step 85\n        // Processing step 86\n        // Processing step 87\n        // Processing step 88\n        // Processing step 89\n        // Processing step 90\n        // Processing step 91\n        // Processing step 92\n        // Processing step 93\n        // Processing step 94\n        // Processing step 95\n        // Processing step 96\n        // Processing step 97\n        // Processing step 98\n        // Processing step 99\n        // Processing step 100\n        // Processing step 101\n        // Processing step 102\n        // Processing step 103\n        // Processing step 104\n        // Processing step 105\n        // Processing step 106\n        // Processing step 107\n        // Processing step 108\n        // Processing step 109\n        // Processing step 110\n        // Processing step 111\n        // Processing step 112\n        // Processing step 113\n        // Processing step 114\n        // Processing step 115\n        // Processing step 116\n        // Processing step 117\n        // Processing step 118\n        // Processing step 119\n        // Processing step 120\n        // Processing step 121\n        // Processing step 122\n        // Processing step 123\n        // Processing step 124\n        // Processing step 125\n        // Processing step 126\n        // Processing step 127\n        // Processing step 128\n        // Processing step 129\n        // Processing step 130\n        // Processing step 131\n        // Processing step 132\n        // Processing step 133\n        // Processing step 134\n        // Processing step 135\n        // Processing step 136\n        // Processing step 137\n        // Processing step 138\n        // Processing step 139\n        // Processing step 140\n        // Processing step 141\n        // Processing step 142\n        // Processing step 143\n        // Processing step 144\n        // Processing step 145\n        // Processing step 146\n        // Processing step 147\n        // Processing step 148\n        // Processing step 149\n        // Processing step 150\n        // Processing step 151\n        // Processing step 152\n        // Processing step 153\n        // Processing step 154\n        // Processing step 155\n        // Processing step 156\n        // Processing step 157\n        // Processing step 158\n        // Processing step 159\n        // Processing step 160\n        // Processing step 161\n        // Processing step 162\n        // Processing step 163\n        // Processing step 164\n        // Processing step 165\n        // Processing step 166\n        // Processing step 167\n        // Processing step 168\n        // Processing step 169\n        // Processing step 170\n        // Processing step 171\n        // Processing step 172\n        // Processing step 173\n        // Processing step 174\n        // Processing step 175\n        // Processing step 176\n        // Processing step 177\n        // Processing step 178\n        // Processing step 179\n        // Processing step 180\n        // Processing step 181\n        // Processing step 182\n        // Processing step 183\n        // Processing step 184\n        // Processing step 185\n        // Processing step 186\n        // Processing step 187\n        // Processing step 188\n        // Processing step 189\n        // Processing step 190\n        // Processing step 191\n        // Processing step 192\n        // Processing step 193\n        // Processing step 194\n        // Processing step 195\n        // Processing step 196\n        // Processing step 197\n        // Processing step 198\n        // Processing step 199\n        // Processing step 200\n        // Processing step 201\n        // Processing step 202\n        // Processing step 203\n        // Processing step 204\n        // Processing step 205\n        // Processing step 206\n        // Processing step 207\n        // Processing step 208\n        // Processing step 209\n        // Processing step 210\n        // Processing step 211\n        // Processing step 212\n        // Processing step 213\n        // Processing step 214\n        // Processing step 215\n        // Processing step 216\n        // Processing step 217\n        // Processing step 218\n        // Processing step 219\n        // Processing step 220\n        // Processing step 221\n        // Processing step 222\n        // Processing step 223\n        // Processing step 224\n        // Processing step 225\n        // Processing step 226\n        // Processing step 227\n        // Processing step 228\n        // Processing step 229\n        // Processing step 230\n        // Processing step 231\n        // Processing step 232\n        // Processing step 233\n        // Processing step 234\n        // Processing step 235\n        // Processing step 236\n        // Processing step 237\n        // Processing step 238\n        // Processing step 239\n        // Processing step 240\n        // Processing step 241\n        // Processing step 242\n        // Processing step 243\n        // Processing step 244\n        // Processing step 245\n        // Processing step 246\n        // Processing step 247\n        // Processing step 248\n        // Processing step 249\n        \n        // Main processing logic\n        try {\n            const cleaned = cleanData(dataset);\n            const validated = validateData(cleaned);\n            const transformed = transformData(validated.valid);\n            const statistics = generateStatistics(transformed);\n            \n            results.processed = transformed;\n            results.errors = validated.invalid;\n            results.statistics = statistics;\n            \n            return results;\n        } catch (error) {\n            console.error('Processing failed:', error);\n            throw error;\n        }\n    }",
        "symbols": [],
        "start_line": 13,
        "end_line": 357,
        "start_col": 4,
        "end_col": 5,
        "children": [
          {
            "id": 133462906,
            "type": "function",
            "name": "cleanData",
            "content": "function cleanData(rawData: any[]): any[] {\n            const cleaned = [];\n            for (const item of rawData) {\n                if (item && typeof item === 'object') {\n                    cleaned.push({\n                        id: item.id || generateId(),\n                        value: item.value || 0,\n                        timestamp: item.timestamp || Date.now()\n                    });\n                }\n            }\n            return cleaned;\n        }",
            "symbols": [],
            "start_line": 20,
            "end_line": 32,
            "start_col": 8,
            "end_col": 9,
            "children": []
          },
          {
            "id": 133462907,
            "type": "function",
            "name": "validateData",
            "content": "function validateData(data: any[]): ValidationResult {\n            const result: ValidationResult = {\n                valid: [],\n                invalid: [],\n                warnings: []\n            };\n            \n            for (const item of data) {\n                if (!item.id) {\n                    result.invalid.push(item);\n                    continue;\n                }\n                \n                if (item.value < 0) {\n                    result.warnings.push(`Negative value for item ${item.id}`);\n                }\n                \n                result.valid.push(item);\n            }\n            \n            return result;\n        }",
            "symbols": [],
            "start_line": 34,
            "end_line": 55,
            "start_col": 8,
            "end_col": 9,
            "children": []
          },
          {
            "id": 133462908,
            "type": "function",
            "name": "transformData",
            "content": "function transformData(validData: any[]): any[] {\n            return validData.map(item => ({\n                ...item,\n                processed: true,\n                processedAt: new Date().toISOString(),\n                hash: generateHash(item)\n            }));\n        }",
            "symbols": [],
            "start_line": 57,
            "end_line": 64,
            "start_col": 8,
            "end_col": 9,
            "children": []
          },
          {
            "id": 133462909,
            "type": "function",
            "name": "anonymous",
            "content": "item => ({\n                ...item,\n                processed: true,\n                processedAt: new Date().toISOString(),\n                hash: generateHash(item)\n            })",
            "symbols": [],
            "start_line": 58,
            "end_line": 63,
            "start_col": 33,
            "end_col": 14,
            "children": []
          },
          {
            "id": 133462910,
            "type": "function",
            "name": "generateStatistics",
            "content": "function generateStatistics(data: any[]): Statistics {\n            const stats: Statistics = {\n                total: data.length,\n                average: 0,\n                min: Number.MAX_VALUE,\n                max: Number.MIN_VALUE,\n                distribution: {}\n            };\n            \n            let sum = 0;\n            for (const item of data) {\n                const value = item.value || 0;\n                sum += value;\n                \n                if (value < stats.min) stats.min = value;\n                if (value > stats.max) stats.max = value;\n                \n                const bucket = Math.floor(value / 10) * 10;\n                stats.distribution[bucket] = (stats.distribution[bucket] || 0) + 1;\n            }\n            \n            stats.average = data.length > 0 ? sum / data.length : 0;\n            return stats;\n        }",
            "symbols": [],
            "start_line": 66,
            "end_line": 89,
            "start_col": 8,
            "end_col": 9,
            "children": []
          }
        ]
      },
      {
        "id": 133462912,
        "type": "function",
        "name": "cleanData",
        "content": "function cleanData(rawData: any[]): any[] {\n            const cleaned = [];\n            for (const item of rawData) {\n                if (item && typeof item === 'object') {\n                    cleaned.push({\n                        id: item.id || generateId(),\n                        value: item.value || 0,\n                        timestamp: item.timestamp || Date.now()\n                    });\n                }\n            }\n            return cleaned;\n        }",
        "symbols": [],
        "start_line": 20,
        "end_line": 32,
        "start_col": 8,
        "end_col": 9,
        "children": []
      },
      {
        "id": 133462913,
        "type": "function",
        "name": "validateData",
        "content": "function validateData(data: any[]): ValidationResult {\n            const result: ValidationResult = {\n                valid: [],\n                invalid: [],\n                warnings: []\n            };\n            \n            for (const item of data) {\n                if (!item.id) {\n                    result.invalid.push(item);\n                    continue;\n                }\n                \n                if (item.value < 0) {\n                    result.warnings.push(`Negative value for item ${item.id}`);\n                }\n                \n                result.valid.push(item);\n            }\n            \n            return result;\n        }",
        "symbols": [],
        "start_line": 34,
        "end_line": 55,
        "start_col": 8,
        "end_col": 9,
        "children": []
      },
      {
        "id": 133462914,
        "type": "function",
        "name": "transformData",
        "content": "function transformData(validData: any[]): any[] {\n            return validData.map(item => ({\n                ...item,\n                processed: true,\n                processedAt: new Date().toISOString(),\n                hash: generateHash(item)\n            }));\n        }",
        "symbols": [],
        "start_line": 57,
        "end_line": 64,
        "start_col": 8,
        "end_col": 9,
        "children": []
      },
      {
        "id": 133462915,
        "type": "function",
        "name": "anonymous",
        "content": "item => ({\n                ...item,\n                processed: true,\n                processedAt: new Date().toISOString(),\n                hash: generateHash(item)\n            })",
        "symbols": [],
        "start_line": 58,
        "end_line": 63,
        "start_col": 33,
        "end_col": 14,
        "children": []
      },
      {
        "id": 133462916,
        "type": "function",
        "name": "generateStatistics",
        "content": "function generateStatistics(data: any[]): Statistics {\n            const stats: Statistics = {\n                total: data.length,\n                average: 0,\n                min: Number.MAX_VALUE,\n                max: Number.MIN_VALUE,\n                distribution: {}\n            };\n            \n            let sum = 0;\n            for (const item of data) {\n                const value = item.value || 0;\n                sum += value;\n                \n                if (value < stats.min) stats.min = value;\n                if (value > stats.max) stats.max = value;\n                \n                const bucket = Math.floor(value / 10) * 10;\n                stats.distribution[bucket] = (stats.distribution[bucket] || 0) + 1;\n            }\n            \n            stats.average = data.length > 0 ? sum / data.length : 0;\n            return stats;\n        }",
        "symbols": [],
        "start_line": 66,
        "end_line": 89,
        "start_col": 8,
        "end_col": 9,
        "children": []
      },
      {
        "id": 133462917,
        "type": "function",
        "name": "generateId",
        "content": "function generateId(): string {\n    return Math.random().toString(36).substr(2, 9);\n}",
        "symbols": [],
        "start_line": 380,
        "end_line": 382,
        "start_col": 0,
        "end_col": 1,
        "children": []
      },
      {
        "id": 133462918,
        "type": "function",
        "name": "generateHash",
        "content": "function generateHash(item: any): string {\n    return btoa(JSON.stringify(item)).substr(0, 8);\n}",
        "symbols": [],
        "start_line": 384,
        "end_line": 386,
        "start_col": 0,
        "end_col": 1,
        "children": []
      },
      {
        "id": 133462919,
        "type": "class",
        "name": "DataProcessor",
        "content": "",
        "symbols": [],
        "start_line": 3,
        "end_line": 358,
        "start_col": 7,
        "end_col": 1,
        "children": [
          {
            "id": 133462920,
            "type": "function",
            "name": "validateInput",
            "content": "validateInput(input: string): boolean {\n        if (!input) return false;\n        return input.length > 0;\n    }",
            "symbols": [],
            "start_line": 7,
            "end_line": 10,
            "start_col": 4,
            "end_col": 5,
            "children": []
          },
          {
            "id": 133462926,
            "type": "function",
            "name": "processLargeDataset",
            "content": "processLargeDataset(dataset: any[]): ProcessedData {\n        const results: ProcessedData = {\n            processed: [],\n            errors: [],\n            statistics: {}\n        };\n        \n        function cleanData(rawData: any[]): any[] {\n    // [BLOCK_REF:133462921]\n}\n        \n        function validateData(data: any[]): ValidationResult {\n    // [BLOCK_REF:133462922]\n}\n        \n        function transformData(validData: any[]): any[] {\n            return validData.map(item => ({\n    // [BLOCK_REF:133462924]\n});\n        }\n        \n        function generateStatistics(data: any[]): Statistics {\n    // [BLOCK_REF:133462925]\n}\n        \n        // Processing step 1\n        // Processing step 2\n        // Processing step 3\n        // Processing step 4\n        // Processing step 5\n        // Processing step 6\n        // Processing step 7\n        // Processing step 8\n        // Processing step 9\n        // Processing step 10\n        // Processing step 11\n        // Processing step 12\n        // Processing step 13\n        // Processing step 14\n        // Processing step 15\n        // Processing step 16\n        // Processing step 17\n        // Processing step 18\n        // Processing step 19\n        // Processing step 20\n        // Processing step 21\n        // Processing step 22\n        // Processing step 23\n        // Processing step 24\n        // Processing step 25\n        // Processing step 26\n        // Processing step 27\n        // Processing step 28\n        // Processing step 29\n        // Processing step 30\n        // Processing step 31\n        // Processing step 32\n        // Processing step 33\n        // Processing step 34\n        // Processing step 35\n        // Processing step 36\n        // Processing step 37\n        // Processing step 38\n        // Processing step 39\n        // Processing step 40\n        // Processing step 41\n        // Processing step 42\n        // Processing step 43\n        // Processing step 44\n        // Processing step 45\n        // Processing step 46\n        // Processing step 47\n        // Processing step 48\n        // Processing step 49\n        // Processing step 50\n        // Processing step 51\n        // Processing step 52\n        // Processing step 53\n        // Processing step 54\n        // Processing step 55\n        // Processing step 56\n        // Processing step 57\n        // Processing step 58\n        // Processing step 59\n        // Processing step 60\n        // Processing step 61\n        // Processing step 62\n        // Processing step 63\n        // Processing step 64\n        // Processing step 65\n        // Processing step 66\n        // Processing step 67\n        // Processing step 68\n        // Processing step 69\n        // Processing step 70\n        // Processing step 71\n        // Processing step 72\n        // Processing step 73\n        // Processing step 74\n        // Processing step 75\n        // Processing step 76\n        // Processing step 77\n        // Processing step 78\n        // Processing step 79\n        // Processing step 80\n        // Processing step 81\n        // Processing step 82\n        // Processing step 83\n        // Processing step 84\n        // Processing step 85\n        // Processing step 86\n        // Processing step 87\n        // Processing step 88\n        // Processing step 89\n        // Processing step 90\n        // Processing step 91\n        // Processing step 92\n        // Processing step 93\n        // Processing step 94\n        // Processing step 95\n        // Processing step 96\n        // Processing step 97\n        // Processing step 98\n        // Processing step 99\n        // Processing step 100\n        // Processing step 101\n        // Processing step 102\n        // Processing step 103\n        // Processing step 104\n        // Processing step 105\n        // Processing step 106\n        // Processing step 107\n        // Processing step 108\n        // Processing step 109\n        // Processing step 110\n        // Processing step 111\n        // Processing step 112\n        // Processing step 113\n        // Processing step 114\n        // Processing step 115\n        // Processing step 116\n        // Processing step 117\n        // Processing step 118\n        // Processing step 119\n        // Processing step 120\n        // Processing step 121\n        // Processing step 122\n        // Processing step 123\n        // Processing step 124\n        // Processing step 125\n        // Processing step 126\n        // Processing step 127\n        // Processing step 128\n        // Processing step 129\n        // Processing step 130\n        // Processing step 131\n        // Processing step 132\n        // Processing step 133\n        // Processing step 134\n        // Processing step 135\n        // Processing step 136\n        // Processing step 137\n        // Processing step 138\n        // Processing step 139\n        // Processing step 140\n        // Processing step 141\n        // Processing step 142\n        // Processing step 143\n        // Processing step 144\n        // Processing step 145\n        // Processing step 146\n        // Processing step 147\n        // Processing step 148\n        // Processing step 149\n        // Processing step 150\n        // Processing step 151\n        // Processing step 152\n        // Processing step 153\n        // Processing step 154\n        // Processing step 155\n        // Processing step 156\n        // Processing step 157\n        // Processing step 158\n        // Processing step 159\n        // Processing step 160\n        // Processing step 161\n        // Processing step 162\n        // Processing step 163\n        // Processing step 164\n        // Processing step 165\n        // Processing step 166\n        // Processing step 167\n        // Processing step 168\n        // Processing step 169\n        // Processing step 170\n        // Processing step 171\n        // Processing step 172\n        // Processing step 173\n        // Processing step 174\n        // Processing step 175\n        // Processing step 176\n        // Processing step 177\n        // Processing step 178\n        // Processing step 179\n        // Processing step 180\n        // Processing step 181\n        // Processing step 182\n        // Processing step 183\n        // Processing step 184\n        // Processing step 185\n        // Processing step 186\n        // Processing step 187\n        // Processing step 188\n        // Processing step 189\n        // Processing step 190\n        // Processing step 191\n        // Processing step 192\n        // Processing step 193\n        // Processing step 194\n        // Processing step 195\n        // Processing step 196\n        // Processing step 197\n        // Processing step 198\n        // Processing step 199\n        // Processing step 200\n        // Processing step 201\n        // Processing step 202\n        // Processing step 203\n        // Processing step 204\n        // Processing step 205\n        // Processing step 206\n        // Processing step 207\n        // Processing step 208\n        // Processing step 209\n        // Processing step 210\n        // Processing step 211\n        // Processing step 212\n        // Processing step 213\n        // Processing step 214\n        // Processing step 215\n        // Processing step 216\n        // Processing step 217\n        // Processing step 218\n        // Processing step 219\n        // Processing step 220\n        // Processing step 221\n        // Processing step 222\n        // Processing step 223\n        // Processing step 224\n        // Processing step 225\n        // Processing step 226\n        // Processing step 227\n        // Processing step 228\n        // Processing step 229\n        // Processing step 230\n        // Processing step 231\n        // Processing step 232\n        // Processing step 233\n        // Processing step 234\n        // Processing step 235\n        // Processing step 236\n        // Processing step 237\n        // Processing step 238\n        // Processing step 239\n        // Processing step 240\n        // Processing step 241\n        // Processing step 242\n        // Processing step 243\n        // Processing step 244\n        // Processing step 245\n        // Processing step 246\n        // Processing step 247\n        // Processing step 248\n        // Processing step 249\n        \n        // Main processing logic\n        try {\n            const cleaned = cleanData(dataset);\n            const validated = validateData(cleaned);\n            const transformed = transformData(validated.valid);\n            const statistics = generateStatistics(transformed);\n            \n            results.processed = transformed;\n            results.errors = validated.invalid;\n            results.statistics = statistics;\n            \n            return results;\n        } catch (error) {\n            console.error('Processing failed:', error);\n            throw error;\n        }\n    }",
            "symbols": [],
            "start_line": 13,
            "end_line": 357,
            "start_col": 4,
            "end_col": 5,
            "children": [
              {
                "id": 133462921,
                "type": "function",
                "name": "cleanData",
                "content": "function cleanData(rawData: any[]): any[] {\n            const cleaned = [];\n            for (const item of rawData) {\n                if (item && typeof item === 'object') {\n                    cleaned.push({\n                        id: item.id || generateId(),\n                        value: item.value || 0,\n                        timestamp: item.timestamp || Date.now()\n                    });\n                }\n            }\n            return cleaned;\n        }",
                "symbols": [],
                "start_line": 20,
                "end_line": 32,
                "start_col": 8,
                "end_col": 9,
                "children": []
              },
              {
                "id": 133462922,
                "type": "function",
                "name": "validateData",
                "content": "function validateData(data: any[]): ValidationResult {\n            const result: ValidationResult = {\n                valid: [],\n                invalid: [],\n                warnings: []\n            };\n            \n            for (const item of data) {\n                if (!item.id) {\n                    result.invalid.push(item);\n                    continue;\n                }\n                \n                if (item.value < 0) {\n                    result.warnings.push(`Negative value for item ${item.id}`);\n                }\n                \n                result.valid.push(item);\n            }\n            \n            return result;\n        }",
                "symbols": [],
                "start_line": 34,
                "end_line": 55,
                "start_col": 8,
                "end_col": 9,
                "children": []
              },
              {
                "id": 133462923,
                "type": "function",
                "name": "transformData",
                "content": "function transformData(validData: any[]): any[] {\n            return validData.map(item => ({\n                ...item,\n                processed: true,\n                processedAt: new Date().toISOString(),\n                hash: generateHash(item)\n            }));\n        }",
                "symbols": [],
                "start_line": 57,
                "end_line": 64,
                "start_col": 8,
                "end_col": 9,
                "children": []
              },
              {
                "id": 133462924,
                "type": "function",
                "name": "anonymous",
                "content": "item => ({\n                ...item,\n                processed: true,\n                processedAt: new Date().toISOString(),\n                hash: generateHash(item)\n            })",
                "symbols": [],
                "start_line": 58,
                "end_line": 63,
                "start_col": 33,
                "end_col": 14,
                "children": []
              },
              {
                "id": 133462925,
                "type": "function",
                "name": "generateStatistics",
                "content": "function generateStatistics(data: any[]): Statistics {\n            const stats: Statistics = {\n                total: data.length,\n                average: 0,\n                min: Number.MAX_VALUE,\n                max: Number.MIN_VALUE,\n                distribution: {}\n            };\n            \n            let sum = 0;\n            for (const item of data) {\n                const value = item.value || 0;\n                sum += value;\n                \n                if (value < stats.min) stats.min = value;\n                if (value > stats.max) stats.max = value;\n                \n                const bucket = Math.floor(value / 10) * 10;\n                stats.distribution[bucket] = (stats.distribution[bucket] || 0) + 1;\n            }\n            \n            stats.average = data.length > 0 ? sum / data.length : 0;\n            return stats;\n        }",
                "symbols": [],
                "start_line": 66,
                "end_line": 89,
                "start_col": 8,
                "end_col": 9,
                "children": []
              }
            ]
          },
          {
            "id": 133462927,
            "type": "variable",
            "name": "data",
            "content": "private data: any[] = []",
            "symbols": [],
            "start_line": 4,
            "end_line": 4,
            "start_col": 4,
            "end_col": 28,
            "children": []
          }
        ]
      },
      {
        "id": 133462928,
        "type": "interface",
        "name": "ProcessedData",
        "content": "interface ProcessedData {\n    processed: any[];\n    errors: any[];\n    statistics: Statistics;\n}",
        "symbols": [],
        "start_line": 360,
        "end_line": 364,
        "start_col": 0,
        "end_col": 1,
        "children": [
          {
            "id": 133462929,
            "type": "variable",
            "name": "processed",
            "content": "processed: any[]",
            "symbols": [],
            "start_line": 361,
            "end_line": 361,
            "start_col": 4,
            "end_col": 20,
            "children": []
          },
          {
            "id": 133462930,
            "type": "variable",
            "name": "errors",
            "content": "errors: any[]",
            "symbols": [],
            "start_line": 362,
            "end_line": 362,
            "start_col": 4,
            "end_col": 17,
            "children": []
          },
          {
            "id": 133462931,
            "type": "variable",
            "name": "statistics",
            "content": "statistics: Statistics",
            "symbols": [],
            "start_line": 363,
            "end_line": 363,
            "start_col": 4,
            "end_col": 26,
            "children": []
          }
        ]
      },
      {
        "id": 133462932,
        "type": "interface",
        "name": "ValidationResult",
        "content": "interface ValidationResult {\n    valid: any[];\n    invalid: any[];\n    warnings: string[];\n}",
        "symbols": [],
        "start_line": 366,
        "end_line": 370,
        "start_col": 0,
        "end_col": 1,
        "children": [
          {
            "id": 133462933,
            "type": "variable",
            "name": "valid",
            "content": "valid: any[]",
            "symbols": [],
            "start_line": 367,
            "end_line": 367,
            "start_col": 4,
            "end_col": 16,
            "children": []
          },
          {
            "id": 133462934,
            "type": "variable",
            "name": "invalid",
            "content": "invalid: any[]",
            "symbols": [],
            "start_line": 368,
            "end_line": 368,
            "start_col": 4,
            "end_col": 18,
            "children": []
          },
          {
            "id": 133462935,
            "type": "variable",
            "name": "warnings",
            "content": "warnings: string[]",
            "symbols": [],
            "start_line": 369,
            "end_line": 369,
            "start_col": 4,
            "end_col": 22,
            "children": []
          }
        ]
      },
      {
        "id": 133462936,
        "type": "interface",
        "name": "Statistics",
        "content": "interface Statistics {\n    total: number;\n    average: number;\n    min: number;\n    max: number;\n    distribution: Record<string, number>;\n}",
        "symbols": [],
        "start_line": 372,
        "end_line": 378,
        "start_col": 0,
        "end_col": 1,
        "children": [
          {
            "id": 133462937,
            "type": "variable",
            "name": "total",
            "content": "total: number",
            "symbols": [],
            "start_line": 373,
            "end_line": 373,
            "start_col": 4,
            "end_col": 17,
            "children": []
          },
          {
            "id": 133462938,
            "type": "variable",
            "name": "average",
            "content": "average: number",
            "symbols": [],
            "start_line": 374,
            "end_line": 374,
            "start_col": 4,
            "end_col": 19,
            "children": []
          },
          {
            "id": 133462939,
            "type": "variable",
            "name": "min",
            "content": "min: number",
            "symbols": [],
            "start_line": 375,
            "end_line": 375,
            "start_col": 4,
            "end_col": 15,
            "children": []
          },
          {
            "id": 133462940,
            "type": "variable",
            "name": "max",
            "content": "max: number",
            "symbols": [],
            "start_line": 376,
            "end_line": 376,
            "start_col": 4,
            "end_col": 15,
            "children": []
          },
          {
            "id": 133462941,
            "type": "variable",
            "name": "distribution",
            "content": "distribution: Record<string, number>",
            "symbols": [],
            "start_line": 377,
            "end_line": 377,
            "start_col": 4,
            "end_col": 40,
            "children": []
          }
        ]
      }
    ],
    "relationships": []
  }
}