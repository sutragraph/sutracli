{
  "/tmp/nested_function_test_ggnm5sdz/small_math.py": {
    "language": "python",
    "id": 2262537021,
    "file_path": "/tmp/nested_function_test_ggnm5sdz/small_math.py",
    "content_hash": "aed2ac435b4a1a9c4a3cb013b16a8615db0d7ee8df67ebeae78ee9ba592bd201",
    "blocks": [
      {
        "id": 2262537022,
        "type": "import",
        "name": "typing",
        "content": "from typing import List, Optional",
        "symbols": [],
        "start_line": 3,
        "end_line": 3,
        "start_col": 0,
        "end_col": 33,
        "children": []
      },
      {
        "id": 2262537023,
        "type": "function",
        "name": "fibonacci",
        "content": "def fibonacci(n: int) -> int:
            \"\"\"Calculate fibonacci number.\"\"\"
            if n <= 1:
                return n
            return fibonacci(n-1) + fibonacci(n-2)",
        "symbols": [],
        "start_line": 5,
        "end_line": 9,
        "start_col": 0,
        "end_col": 42,
        "children": []
      },
      {
        "id": 2262537024,
        "type": "function",
        "name": "is_prime",
        "content": "def is_prime(num: int) -> bool:
            \"\"\"Check if a number is prime.\"\"\"
            if num < 2:
                return False
            for i in range(2, int(num ** 0.5) + 1):
                if num % i == 0:
                    return False
            return True",
        "symbols": [],
        "start_line": 11,
        "end_line": 18,
        "start_col": 0,
        "end_col": 15,
        "children": []
      },
      {
        "id": 2262537025,
        "type": "function",
        "name": "gcd",
        "content": "def gcd(a: int, b: int) -> int:
                \"\"\"Calculate greatest common divisor.\"\"\"
                while b:
                    a, b = b, a % b
                return a",
        "symbols": [],
        "start_line": 22,
        "end_line": 26,
        "start_col": 4,
        "end_col": 16,
        "children": []
      },
      {
        "id": 2262537026,
        "type": "function",
        "name": "lcm",
        "content": "def lcm(a: int, b: int) -> int:
                \"\"\"Calculate least common multiple.\"\"\"
                return abs(a * b) // MathUtils.gcd(a, b)",
        "symbols": [],
        "start_line": 29,
        "end_line": 31,
        "start_col": 4,
        "end_col": 48,
        "children": []
      },
      {
        "id": 2262537027,
        "type": "class",
        "name": "MathUtils",
        "content": "class MathUtils:
            @staticmethod
            def gcd(a: int, b: int) -> int:
                \"\"\"Calculate greatest common divisor.\"\"\"
                while b:
                    a, b = b, a % b
                return a
            
            @staticmethod
            def lcm(a: int, b: int) -> int:
                \"\"\"Calculate least common multiple.\"\"\"
                return abs(a * b) // MathUtils.gcd(a, b)",
        "symbols": [],
        "start_line": 20,
        "end_line": 31,
        "start_col": 0,
        "end_col": 48,
        "children": [
          {
            "id": 2262537028,
            "type": "function",
            "name": "gcd",
            "content": "def gcd(a: int, b: int) -> int:
                    \"\"\"Calculate greatest common divisor.\"\"\"
                    while b:
                        a, b = b, a % b
                    return a",
            "symbols": [],
            "start_line": 22,
            "end_line": 26,
            "start_col": 4,
            "end_col": 16,
            "children": []
          },
          {
            "id": 2262537029,
            "type": "function",
            "name": "MathUtils",
            "content": "def lcm(a: int, b: int) -> int:
                    \"\"\"Calculate least common multiple.\"\"\"
                    return abs(a * b) // MathUtils.gcd(a, b)",
            "symbols": [],
            "start_line": 29,
            "end_line": 31,
            "start_col": 4,
            "end_col": 48,
            "children": []
          },
          {
            "id": 2262537030,
            "type": "variable",
            "name": "b",
            "content": "a, b = b, a % b",
            "symbols": [],
            "start_line": 25,
            "end_line": 25,
            "start_col": 12,
            "end_col": 27,
            "children": []
          },
          {
            "id": 2262537031,
            "type": "class",
            "name": "staticmethod",
            "content": "class MathUtils:
                @staticmethod
                def gcd(a: int, b: int) -> int:
                    \"\"\"Calculate greatest common divisor.\"\"\"
                    while b:
                        a, b = b, a % b
                    return a
                
                @staticmethod
                def lcm(a: int, b: int) -> int:
                    \"\"\"Calculate least common multiple.\"\"\"
                    return abs(a * b) // MathUtils.gcd(a, b)",
            "symbols": [],
            "start_line": 20,
            "end_line": 31,
            "start_col": 0,
            "end_col": 48,
            "children": []
          }
        ]
      },
      {
        "id": 2262537032,
        "type": "variable",
        "name": "b",
        "content": "a, b = b, a % b",
        "symbols": [],
        "start_line": 25,
        "end_line": 25,
        "start_col": 12,
        "end_col": 27,
        "children": []
      }
    ],
    "relationships": []
  },
  "/tmp/nested_function_test_ggnm5sdz/small_utils.ts": {
    "language": "typescript",
    "id": 2038160499,
    "file_path": "/tmp/nested_function_test_ggnm5sdz/small_utils.ts",
    "content_hash": "37f5f35934c0a63e2ff5127b44b3c4cbdf9e428b7f28c94ea2da04c5b9bf3fc2",
    "blocks": [
      {
        "id": 2038160500,
        "type": "function",
        "name": "formatString",
        "content": "static formatString(input: string): string {
                return input.trim().toLowerCase();
            }",
        "symbols": [],
        "start_line": 4,
        "end_line": 6,
        "start_col": 4,
        "end_col": 5,
        "children": []
      },
      {
        "id": 2038160501,
        "type": "function",
        "name": "calculateSum",
        "content": "static calculateSum(numbers: number[]): number {
                return numbers.reduce((sum, num) => sum + num, 0);
            }",
        "symbols": [],
        "start_line": 8,
        "end_line": 10,
        "start_col": 4,
        "end_col": 5,
        "children": []
      },
      {
        "id": 2038160502,
        "type": "function",
        "name": "anonymous",
        "content": "(sum, num) => sum + num",
        "symbols": [],
        "start_line": 9,
        "end_line": 9,
        "start_col": 30,
        "end_col": 53,
        "children": []
      },
      {
        "id": 2038160503,
        "type": "function",
        "name": "isValidEmail",
        "content": "static isValidEmail(email: string): boolean {
                const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;
                return emailRegex.test(email);
            }",
        "symbols": [],
        "start_line": 12,
        "end_line": 15,
        "start_col": 4,
        "end_col": 5,
        "children": []
      },
      {
        "id": 2038160504,
        "type": "function",
        "name": "quickSort",
        "content": "function quickSort(arr: number[]): number[] {
            if (arr.length <= 1) return arr;
            
            const pivot = arr[Math.floor(arr.length / 2)];
            const left = arr.filter(x => x < pivot);
            const right = arr.filter(x => x > pivot);
            
            return [...quickSort(left), pivot, ...quickSort(right)];
        }",
        "symbols": [],
        "start_line": 18,
        "end_line": 26,
        "start_col": 0,
        "end_col": 1,
        "children": []
      },
      {
        "id": 2038160505,
        "type": "function",
        "name": "anonymous",
        "content": "x => x < pivot",
        "symbols": [],
        "start_line": 22,
        "end_line": 22,
        "start_col": 28,
        "end_col": 42,
        "children": []
      },
      {
        "id": 2038160506,
        "type": "function",
        "name": "anonymous",
        "content": "x => x > pivot",
        "symbols": [],
        "start_line": 23,
        "end_line": 23,
        "start_col": 29,
        "end_col": 43,
        "children": []
      },
      {
        "id": 2038160507,
        "type": "class",
        "name": "SimpleUtils",
        "content": "class SimpleUtils {
            static formatString(input: string): string {
                return input.trim().toLowerCase();
            }
            
            static calculateSum(numbers: number[]): number {
                return numbers.reduce((sum, num) => sum + num, 0);
            }
            
            static isValidEmail(email: string): boolean {
                const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;
                return emailRegex.test(email);
            }
        }",
        "symbols": [],
        "start_line": 3,
        "end_line": 16,
        "start_col": 7,
        "end_col": 1,
        "children": [
          {
            "id": 2038160508,
            "type": "function",
            "name": "formatString",
            "content": "static formatString(input: string): string {
                    return input.trim().toLowerCase();
                }",
            "symbols": [],
            "start_line": 4,
            "end_line": 6,
            "start_col": 4,
            "end_col": 5,
            "children": []
          },
          {
            "id": 2038160509,
            "type": "function",
            "name": "reduce",
            "content": "static calculateSum(numbers: number[]): number {
                    return numbers.reduce((sum, num) => sum + num, 0);
                }",
            "symbols": [],
            "start_line": 8,
            "end_line": 10,
            "start_col": 4,
            "end_col": 5,
            "children": []
          },
          {
            "id": 2038160510,
            "type": "function",
            "name": "isValidEmail",
            "content": "static isValidEmail(email: string): boolean {
                    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;
                    return emailRegex.test(email);
                }",
            "symbols": [],
            "start_line": 12,
            "end_line": 15,
            "start_col": 4,
            "end_col": 5,
            "children": []
          },
          {
            "id": 2038160511,
            "type": "class",
            "name": "SimpleUtils",
            "content": "class SimpleUtils {
                static formatString(input: string): string {
                    return input.trim().toLowerCase();
                }
                
                static calculateSum(numbers: number[]): number {
                    return numbers.reduce((sum, num) => sum + num, 0);
                }
                
                static isValidEmail(email: string): boolean {
                    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;
                    return emailRegex.test(email);
                }
            }",
            "symbols": [],
            "start_line": 3,
            "end_line": 16,
            "start_col": 7,
            "end_col": 1,
            "children": []
          }
        ]
      }
    ],
    "relationships": []
  },
  "/tmp/nested_function_test_ggnm5sdz/large_analyzer.py": {
    "language": "python",
    "id": 3757212570,
    "file_path": "/tmp/nested_function_test_ggnm5sdz/large_analyzer.py",
    "content_hash": "b1602b6ba00c3aca4d0ea71befedd1f65e62f214232f559ac794a713d5b6a4ac",
    "blocks": [
      {
        "id": 3757212571,
        "type": "import",
        "name": "json",
        "content": "import json",
        "symbols": [],
        "start_line": 3,
        "end_line": 3,
        "start_col": 0,
        "end_col": 11,
        "children": []
      },
      {
        "id": 3757212572,
        "type": "import",
        "name": "hashlib",
        "content": "import hashlib",
        "symbols": [],
        "start_line": 4,
        "end_line": 4,
        "start_col": 0,
        "end_col": 14,
        "children": []
      },
      {
        "id": 3757212573,
        "type": "import",
        "name": "typing",
        "content": "from typing import Dict, List, Any, Optional",
        "symbols": [],
        "start_line": 5,
        "end_line": 5,
        "start_col": 0,
        "end_col": 44,
        "children": []
      },
      {
        "id": 3757212574,
        "type": "import",
        "name": "datetime",
        "content": "from datetime import datetime",
        "symbols": [],
        "start_line": 6,
        "end_line": 6,
        "start_col": 0,
        "end_col": 29,
        "children": []
      },
      {
        "id": 3757212575,
        "type": "function",
        "name": "__init__",
        "content": "def __init__(self):
                self.data = []
                self.results = {}",
        "symbols": [],
        "start_line": 9,
        "end_line": 11,
        "start_col": 4,
        "end_col": 25,
        "children": []
      },
      {
        "id": 3757212576,
        "type": "function",
        "name": "validate_input",
        "content": "def validate_input(self, data: Any) -> bool:
                \"\"\"Validate input data.\"\"\"
                return data is not None and len(str(data)) > 0",
        "symbols": [],
        "start_line": 14,
        "end_line": 16,
        "start_col": 4,
        "end_col": 54,
        "children": []
      },
      {
        "id": 3757212581,
        "type": "function",
        "name": "analyze_complex_dataset",
        "content": "def analyze_complex_dataset(self, dataset: List[Dict]) -> Dict[str, Any]:
                \"\"\"Analyze a complex dataset with multiple processing steps.\"\"\"
                analysis_results = {
                    'processed_data': [],
                    'statistics': {},
                    'anomalies': [],
                    'recommendations': []
                }
                
                def preprocess_data(raw_data: List[Dict]) -> List[Dict]:
            # [BLOCK_REF:3757212577]
                
                def detect_anomalies(data: List[Dict]) -> List[Dict]:
            # [BLOCK_REF:3757212578]
                
                def calculate_advanced_statistics(data: List[Dict]) -> Dict[str, Any]:
            # [BLOCK_REF:3757212579]
                
                def generate_recommendations(data: List[Dict], stats: Dict, anomalies: List[Dict]) -> List[str]:
            # [BLOCK_REF:3757212580]
                
                # Analysis step 1
                # Analysis step 2
                # Analysis step 3
                # Analysis step 4
                # Analysis step 5
                # Analysis step 6
                # Analysis step 7
                # Analysis step 8
                # Analysis step 9
                # Analysis step 10
                # Analysis step 11
                # Analysis step 12
                # Analysis step 13
                # Analysis step 14
                # Analysis step 15
                # Analysis step 16
                # Analysis step 17
                # Analysis step 18
                # Analysis step 19
                # Analysis step 20
                # Analysis step 21
                # Analysis step 22
                # Analysis step 23
                # Analysis step 24
                # Analysis step 25
                # Analysis step 26
                # Analysis step 27
                # Analysis step 28
                # Analysis step 29
                # Analysis step 30
                # Analysis step 31
                # Analysis step 32
                # Analysis step 33
                # Analysis step 34
                # Analysis step 35
                # Analysis step 36
                # Analysis step 37
                # Analysis step 38
                # Analysis step 39
                # Analysis step 40
                # Analysis step 41
                # Analysis step 42
                # Analysis step 43
                # Analysis step 44
                # Analysis step 45
                # Analysis step 46
                # Analysis step 47
                # Analysis step 48
                # Analysis step 49
                # Analysis step 50
                # Analysis step 51
                # Analysis step 52
                # Analysis step 53
                # Analysis step 54
                # Analysis step 55
                # Analysis step 56
                # Analysis step 57
                # Analysis step 58
                # Analysis step 59
                # Analysis step 60
                # Analysis step 61
                # Analysis step 62
                # Analysis step 63
                # Analysis step 64
                # Analysis step 65
                # Analysis step 66
                # Analysis step 67
                # Analysis step 68
                # Analysis step 69
                # Analysis step 70
                # Analysis step 71
                # Analysis step 72
                # Analysis step 73
                # Analysis step 74
                # Analysis step 75
                # Analysis step 76
                # Analysis step 77
                # Analysis step 78
                # Analysis step 79
                # Analysis step 80
                # Analysis step 81
                # Analysis step 82
                # Analysis step 83
                # Analysis step 84
                # Analysis step 85
                # Analysis step 86
                # Analysis step 87
                # Analysis step 88
                # Analysis step 89
                # Analysis step 90
                # Analysis step 91
                # Analysis step 92
                # Analysis step 93
                # Analysis step 94
                # Analysis step 95
                # Analysis step 96
                # Analysis step 97
                # Analysis step 98
                # Analysis step 99
                # Analysis step 100
                # Analysis step 101
                # Analysis step 102
                # Analysis step 103
                # Analysis step 104
                # Analysis step 105
                # Analysis step 106
                # Analysis step 107
                # Analysis step 108
                # Analysis step 109
                # Analysis step 110
                # Analysis step 111
                # Analysis step 112
                # Analysis step 113
                # Analysis step 114
                # Analysis step 115
                # Analysis step 116
                # Analysis step 117
                # Analysis step 118
                # Analysis step 119
                # Analysis step 120
                # Analysis step 121
                # Analysis step 122
                # Analysis step 123
                # Analysis step 124
                # Analysis step 125
                # Analysis step 126
                # Analysis step 127
                # Analysis step 128
                # Analysis step 129
                # Analysis step 130
                # Analysis step 131
                # Analysis step 132
                # Analysis step 133
                # Analysis step 134
                # Analysis step 135
                # Analysis step 136
                # Analysis step 137
                # Analysis step 138
                # Analysis step 139
                # Analysis step 140
                # Analysis step 141
                # Analysis step 142
                # Analysis step 143
                # Analysis step 144
                # Analysis step 145
                # Analysis step 146
                # Analysis step 147
                # Analysis step 148
                # Analysis step 149
                # Analysis step 150
                # Analysis step 151
                # Analysis step 152
                # Analysis step 153
                # Analysis step 154
                # Analysis step 155
                # Analysis step 156
                # Analysis step 157
                # Analysis step 158
                # Analysis step 159
                # Analysis step 160
                # Analysis step 161
                # Analysis step 162
                # Analysis step 163
                # Analysis step 164
                # Analysis step 165
                # Analysis step 166
                # Analysis step 167
                # Analysis step 168
                # Analysis step 169
                # Analysis step 170
                # Analysis step 171
                # Analysis step 172
                # Analysis step 173
                # Analysis step 174
                # Analysis step 175
                # Analysis step 176
                # Analysis step 177
                # Analysis step 178
                # Analysis step 179
                # Analysis step 180
                # Analysis step 181
                # Analysis step 182
                # Analysis step 183
                # Analysis step 184
                # Analysis step 185
                # Analysis step 186
                # Analysis step 187
                # Analysis step 188
                # Analysis step 189
                # Analysis step 190
                # Analysis step 191
                # Analysis step 192
                # Analysis step 193
                # Analysis step 194
                # Analysis step 195
                # Analysis step 196
                # Analysis step 197
                # Analysis step 198
                # Analysis step 199
                
                # Main analysis workflow
                try:
                    # Step 1: Preprocess the data
                    processed_data = preprocess_data(dataset)
                    
                    # Step 2: Detect anomalies
                    anomalies = detect_anomalies(processed_data)
                    
                    # Step 3: Calculate statistics
                    statistics = calculate_advanced_statistics(processed_data)
                    
                    # Step 4: Generate recommendations
                    recommendations = generate_recommendations(processed_data, statistics, anomalies)
                    
                    # Compile results
                    analysis_results.update({
                        'processed_data': processed_data,
                        'statistics': statistics,
                        'anomalies': anomalies,
                        'recommendations': recommendations,
                        'processing_timestamp': datetime.now().isoformat(),
                        'data_quality_score': max(0, 100 - (len(anomalies) / len(processed_data) * 100)) if processed_data else 0
                    })
                    
                    return analysis_results
                    
                except Exception as e:
                    return {
                        'error': str(e),
                        'processed_data': [],
                        'statistics': {},
                        'anomalies': [],
                        'recommendations': [f\"Analysis failed: {str(e)}\"]
                    }",
        "symbols": [],
        "start_line": 19,
        "end_line": 368,
        "start_col": 4,
        "end_col": 13,
        "children": [
          {
            "id": 3757212577,
            "type": "function",
            "name": "preprocess_data",
            "content": "def preprocess_data(raw_data: List[Dict]) -> List[Dict]:
                        \"\"\"Clean and preprocess the raw data.\"\"\"
                        processed = []
                        for item in raw_data:
                            if not item or not isinstance(item, dict):
                                continue
                            
                            cleaned_item = {
                                'id': item.get('id', self._generate_id()),
                                'value': float(item.get('value', 0)),
                                'category': str(item.get('category', 'unknown')).lower(),
                                'timestamp': item.get('timestamp', datetime.now().isoformat()),
                                'metadata': item.get('metadata', {})
                            }
                            
                            # Additional cleaning
                            if cleaned_item['value'] < 0:
                                cleaned_item['value'] = abs(cleaned_item['value'])
                                cleaned_item['metadata']['was_negative'] = True
                            
                            processed.append(cleaned_item)
                        
                        return processed",
            "symbols": [],
            "start_line": 28,
            "end_line": 50,
            "start_col": 8,
            "end_col": 28,
            "children": []
          },
          {
            "id": 3757212578,
            "type": "function",
            "name": "detect_anomalies",
            "content": "def detect_anomalies(data: List[Dict]) -> List[Dict]:
                        \"\"\"Detect anomalies in the dataset.\"\"\"
                        anomalies = []
                        if not data:
                            return anomalies
                        
                        values = [item['value'] for item in data]
                        mean_val = sum(values) / len(values)
                        std_dev = (sum((x - mean_val) ** 2 for x in values) / len(values)) ** 0.5
                        
                        threshold = mean_val + (2 * std_dev)
                        
                        for item in data:
                            if item['value'] > threshold:
                                anomalies.append({
                                    'item_id': item['id'],
                                    'value': item['value'],
                                    'threshold': threshold,
                                    'deviation': item['value'] - mean_val,
                                    'type': 'statistical_outlier'
                                })
                        
                        return anomalies",
            "symbols": [],
            "start_line": 52,
            "end_line": 74,
            "start_col": 8,
            "end_col": 28,
            "children": []
          },
          {
            "id": 3757212579,
            "type": "function",
            "name": "calculate_advanced_statistics",
            "content": "def calculate_advanced_statistics(data: List[Dict]) -> Dict[str, Any]:
                        \"\"\"Calculate comprehensive statistics.\"\"\"
                        if not data:
                            return {}
                        
                        values = [item['value'] for item in data]
                        categories = {}
                        
                        for item in data:
                            cat = item['category']
                            if cat not in categories:
                                categories[cat] = []
                            categories[cat].append(item['value'])
                        
                        stats = {
                            'total_items': len(data),
                            'total_value': sum(values),
                            'mean': sum(values) / len(values),
                            'median': sorted(values)[len(values) // 2],
            //                 'min': min(values),
            //                 'max': max(values),
            //                 'categories': {}
            //             }
            //             
            //             # Category-specific statistics
            //             for cat, cat_values in categories.items():
            //                 stats['categories'][cat] = {
            //                     'count': len(cat_values),
            //                     'mean': sum(cat_values) / len(cat_values),
            //                     'total': sum(cat_values),
            //                     'percentage': (len(cat_values) / len(data)) * 100
            //                 }
            //             
            //             return stats",
            "symbols": [],
            "start_line": 76,
            "end_line": 109,
            "start_col": 8,
            "end_col": 24,
            "children": []
          },
          {
            "id": 3757212580,
            "type": "function",
            "name": "generate_recommendations",
            "content": "def generate_recommendations(data: List[Dict], stats: Dict, anomalies: List[Dict]) -> List[str]:
                        \"\"\"Generate recommendations based on analysis.\"\"\"
                        recommendations = []
                        
                        if not data:
                            recommendations.append(\"No data available for analysis\")
                            return recommendations
                        
                        # Data quality recommendations
                        if len(anomalies) > len(data) * 0.1:
                            recommendations.append(\"High number of anomalies detected - consider data quality review\")
                        
                        # Category distribution recommendations
                        if 'categories' in stats:
                            category_counts = [cat_stats['count'] for cat_stats in stats['categories'].values()]
                            if max(category_counts) > len(data) * 0.8:
                                recommendations.append(\"Data heavily skewed towards one category - consider balancing\")
                        
                        # Value range recommendations
                        if stats.get('max', 0) > stats.get('mean', 0) * 10:
                            recommendations.append(\"Large value range detected - consider normalization\")
                        
                        return recommendations",
            "symbols": [],
            "start_line": 111,
            "end_line": 133,
            "start_col": 8,
            "end_col": 34,
            "children": []
          }
        ]
      },
      {
        "id": 3757212582,
        "type": "function",
        "name": "preprocess_data",
        "content": "def preprocess_data(raw_data: List[Dict]) -> List[Dict]:
                    \"\"\"Clean and preprocess the raw data.\"\"\"
                    processed = []
                    for item in raw_data:
                        if not item or not isinstance(item, dict):
                            continue
                        
                        cleaned_item = {
                            'id': item.get('id', self._generate_id()),
                            'value': float(item.get('value', 0)),
                            'category': str(item.get('category', 'unknown')).lower(),
                            'timestamp': item.get('timestamp', datetime.now().isoformat()),
                            'metadata': item.get('metadata', {})
                        }
                        
                        # Additional cleaning
                        if cleaned_item['value'] < 0:
                            cleaned_item['value'] = abs(cleaned_item['value'])
                            cleaned_item['metadata']['was_negative'] = True
                        
                        processed.append(cleaned_item)
                    
                    return processed",
        "symbols": [],
        "start_line": 28,
        "end_line": 50,
        "start_col": 8,
        "end_col": 28,
        "children": []
      },
      {
        "id": 3757212583,
        "type": "function",
        "name": "detect_anomalies",
        "content": "def detect_anomalies(data: List[Dict]) -> List[Dict]:
                    \"\"\"Detect anomalies in the dataset.\"\"\"
                    anomalies = []
                    if not data:
                        return anomalies
                    
                    values = [item['value'] for item in data]
                    mean_val = sum(values) / len(values)
                    std_dev = (sum((x - mean_val) ** 2 for x in values) / len(values)) ** 0.5
                    
                    threshold = mean_val + (2 * std_dev)
                    
                    for item in data:
                        if item['value'] > threshold:
                            anomalies.append({
                                'item_id': item['id'],
                                'value': item['value'],
                                'threshold': threshold,
                                'deviation': item['value'] - mean_val,
                                'type': 'statistical_outlier'
                            })
                    
                    return anomalies",
        "symbols": [],
        "start_line": 52,
        "end_line": 74,
        "start_col": 8,
        "end_col": 28,
        "children": []
      },
      {
        "id": 3757212584,
        "type": "function",
        "name": "calculate_advanced_statistics",
        "content": "def calculate_advanced_statistics(data: List[Dict]) -> Dict[str, Any]:
                    \"\"\"Calculate comprehensive statistics.\"\"\"
                    if not data:
                        return {}
                    
                    values = [item['value'] for item in data]
                    categories = {}
                    
                    for item in data:
                        cat = item['category']
                        if cat not in categories:
                            categories[cat] = []
                        categories[cat].append(item['value'])
                    
                    stats = {
                        'total_items': len(data),
                        'total_value': sum(values),
                        'mean': sum(values) / len(values),
                        'median': sorted(values)[len(values) // 2],
        //                 'min': min(values),
        //                 'max': max(values),
        //                 'categories': {}
        //             }
        //             
        //             # Category-specific statistics
        //             for cat, cat_values in categories.items():
        //                 stats['categories'][cat] = {
        //                     'count': len(cat_values),
        //                     'mean': sum(cat_values) / len(cat_values),
        //                     'total': sum(cat_values),
        //                     'percentage': (len(cat_values) / len(data)) * 100
        //                 }
        //             
        //             return stats",
        "symbols": [],
        "start_line": 76,
        "end_line": 109,
        "start_col": 8,
        "end_col": 24,
        "children": []
      },
      {
        "id": 3757212585,
        "type": "function",
        "name": "generate_recommendations",
        "content": "def generate_recommendations(data: List[Dict], stats: Dict, anomalies: List[Dict]) -> List[str]:
                    \"\"\"Generate recommendations based on analysis.\"\"\"
                    recommendations = []
                    
                    if not data:
                        recommendations.append(\"No data available for analysis\")
                        return recommendations
                    
                    # Data quality recommendations
                    if len(anomalies) > len(data) * 0.1:
                        recommendations.append(\"High number of anomalies detected - consider data quality review\")
                    
                    # Category distribution recommendations
                    if 'categories' in stats:
                        category_counts = [cat_stats['count'] for cat_stats in stats['categories'].values()]
                        if max(category_counts) > len(data) * 0.8:
                            recommendations.append(\"Data heavily skewed towards one category - consider balancing\")
                    
                    # Value range recommendations
                    if stats.get('max', 0) > stats.get('mean', 0) * 10:
                        recommendations.append(\"Large value range detected - consider normalization\")
                    
                    return recommendations",
        "symbols": [],
        "start_line": 111,
        "end_line": 133,
        "start_col": 8,
        "end_col": 34,
        "children": []
      },
      {
        "id": 3757212586,
        "type": "function",
        "name": "_generate_id",
        "content": "def _generate_id(self) -> str:
                \"\"\"Generate a unique ID.\"\"\"
                return hashlib.md5(str(datetime.now()).encode()).hexdigest()[:8]",
        "symbols": [],
        "start_line": 370,
        "end_line": 372,
        "start_col": 4,
        "end_col": 72,
        "children": []
      },
      {
        "id": 3757212587,
        "type": "function",
        "name": "simple_helper",
        "content": "def simple_helper(value: str) -> str:
            \"\"\"Simple helper function.\"\"\"
            return value.upper().strip()",
        "symbols": [],
        "start_line": 375,
        "end_line": 377,
        "start_col": 0,
        "end_col": 32,
        "children": []
      },
      {
        "id": 3757212588,
        "type": "class",
        "name": "DataAnalyzer",
        "content": "class DataAnalyzer:
            def __init__(self):
                self.data = []
                self.results = {}
            
            # Small function - should not trigger nested extraction
            def validate_input(self, data: Any) -> bool:
                \"\"\"Validate input data.\"\"\"
                return data is not None and len(str(data)) > 0
            
            # Large function - should trigger nested extraction
            def analyze_complex_dataset(self, dataset: List[Dict]) -> Dict[str, Any]:
                \"\"\"Analyze a complex dataset with multiple processing steps.\"\"\"
                analysis_results = {
                    'processed_data': [],
                    'statistics': {},
                    'anomalies': [],
                    'recommendations': []
                }
                
                def preprocess_data(raw_data: List[Dict]) -> List[Dict]:
                    \"\"\"Clean and preprocess the raw data.\"\"\"
                    processed = []
                    for item in raw_data:
                        if not item or not isinstance(item, dict):
                            continue
                        
                        cleaned_item = {
                            'id': item.get('id', self._generate_id()),
                            'value': float(item.get('value', 0)),
                            'category': str(item.get('category', 'unknown')).lower(),
                            'timestamp': item.get('timestamp', datetime.now().isoformat()),
                            'metadata': item.get('metadata', {})
                        }
                        
                        # Additional cleaning
                        if cleaned_item['value'] < 0:
                            cleaned_item['value'] = abs(cleaned_item['value'])
                            cleaned_item['metadata']['was_negative'] = True
                        
                        processed.append(cleaned_item)
                    
                    return processed
                
                def detect_anomalies(data: List[Dict]) -> List[Dict]:
                    \"\"\"Detect anomalies in the dataset.\"\"\"
                    anomalies = []
                    if not data:
                        return anomalies
                    
                    values = [item['value'] for item in data]
                    mean_val = sum(values) / len(values)
                    std_dev = (sum((x - mean_val) ** 2 for x in values) / len(values)) ** 0.5
                    
                    threshold = mean_val + (2 * std_dev)
                    
                    for item in data:
                        if item['value'] > threshold:
                            anomalies.append({
                                'item_id': item['id'],
                                'value': item['value'],
                                'threshold': threshold,
                                'deviation': item['value'] - mean_val,
                                'type': 'statistical_outlier'
                            })
                    
                    return anomalies
                
                def calculate_advanced_statistics(data: List[Dict]) -> Dict[str, Any]:
                    \"\"\"Calculate comprehensive statistics.\"\"\"
                    if not data:
                        return {}
                    
                    values = [item['value'] for item in data]
                    categories = {}
                    
                    for item in data:
                        cat = item['category']
                        if cat not in categories:
                            categories[cat] = []
                        categories[cat].append(item['value'])
                    
                    stats = {
                        'total_items': len(data),
                        'total_value': sum(values),
                        'mean': sum(values) / len(values),
                        'median': sorted(values)[len(values) // 2],
        //                 'min': min(values),
        //                 'max': max(values),
        //                 'categories': {}
        //             }
        //             
        //             # Category-specific statistics
        //             for cat, cat_values in categories.items():
        //                 stats['categories'][cat] = {
        //                     'count': len(cat_values),
        //                     'mean': sum(cat_values) / len(cat_values),
        //                     'total': sum(cat_values),
        //                     'percentage': (len(cat_values) / len(data)) * 100
        //                 }
        //             
        //             return stats
        //         
        //         def generate_recommendations(data: List[Dict], stats: Dict, anomalies: List[Dict]) -> List[str]:
        //             \"\"\"Generate recommendations based on analysis.\"\"\"
        //             recommendations = []
        //             
        //             if not data:
        //                 recommendations.append(\"No data available for analysis\")
        //                 return recommendations
        //             
        //             # Data quality recommendations
        //             if len(anomalies) > len(data) * 0.1:
        //                 recommendations.append(\"High number of anomalies detected - consider data quality review\")
        //             
        //             # Category distribution recommendations
        //             if 'categories' in stats:
        //                 category_counts = [cat_stats['count'] for cat_stats in stats['categories'].values()]
        //                 if max(category_counts) > len(data) * 0.8:
        //                     recommendations.append(\"Data heavily skewed towards one category - consider balancing\")
        //             
        //             # Value range recommendations
        //             if stats.get('max', 0) > stats.get('mean', 0) * 10:
        //                 recommendations.append(\"Large value range detected - consider normalization\")
        //             
        //             return recommendations
        //         
        //         # Analysis step 1
        //         # Analysis step 2
        //         # Analysis step 3
        //         # Analysis step 4
        //         # Analysis step 5
        //         # Analysis step 6
        //         # Analysis step 7
        //         # Analysis step 8
        //         # Analysis step 9
        //         # Analysis step 10
        //         # Analysis step 11
        //         # Analysis step 12
        //         # Analysis step 13
        //         # Analysis step 14
        //         # Analysis step 15
        //         # Analysis step 16
        //         # Analysis step 17
        //         # Analysis step 18
        //         # Analysis step 19
        //         # Analysis step 20
        //         # Analysis step 21
        //         # Analysis step 22
        //         # Analysis step 23
        //         # Analysis step 24
        //         # Analysis step 25
        //         # Analysis step 26
        //         # Analysis step 27
        //         # Analysis step 28
        //         # Analysis step 29
        //         # Analysis step 30
        //         # Analysis step 31
        //         # Analysis step 32
        //         # Analysis step 33
        //         # Analysis step 34
        //         # Analysis step 35
        //         # Analysis step 36
        //         # Analysis step 37
        //         # Analysis step 38
        //         # Analysis step 39
        //         # Analysis step 40
        //         # Analysis step 41
        //         # Analysis step 42
        //         # Analysis step 43
        //         # Analysis step 44
        //         # Analysis step 45
        //         # Analysis step 46
        //         # Analysis step 47
        //         # Analysis step 48
        //         # Analysis step 49
        //         # Analysis step 50
        //         # Analysis step 51
        //         # Analysis step 52
        //         # Analysis step 53
        //         # Analysis step 54
        //         # Analysis step 55
        //         # Analysis step 56
        //         # Analysis step 57
        //         # Analysis step 58
        //         # Analysis step 59
        //         # Analysis step 60
        //         # Analysis step 61
        //         # Analysis step 62
        //         # Analysis step 63
        //         # Analysis step 64
        //         # Analysis step 65
        //         # Analysis step 66
        //         # Analysis step 67
        //         # Analysis step 68
        //         # Analysis step 69
        //         # Analysis step 70
        //         # Analysis step 71
        //         # Analysis step 72
        //         # Analysis step 73
        //         # Analysis step 74
        //         # Analysis step 75
        //         # Analysis step 76
        //         # Analysis step 77
        //         # Analysis step 78
        //         # Analysis step 79
        //         # Analysis step 80
        //         # Analysis step 81
        //         # Analysis step 82
        //         # Analysis step 83
        //         # Analysis step 84
        //         # Analysis step 85
        //         # Analysis step 86
        //         # Analysis step 87
        //         # Analysis step 88
        //         # Analysis step 89
        //         # Analysis step 90
        //         # Analysis step 91
        //         # Analysis step 92
        //         # Analysis step 93
        //         # Analysis step 94
        //         # Analysis step 95
        //         # Analysis step 96
        //         # Analysis step 97
        //         # Analysis step 98
        //         # Analysis step 99
        //         # Analysis step 100
        //         # Analysis step 101
        //         # Analysis step 102
        //         # Analysis step 103
        //         # Analysis step 104
        //         # Analysis step 105
        //         # Analysis step 106
        //         # Analysis step 107
        //         # Analysis step 108
        //         # Analysis step 109
        //         # Analysis step 110
        //         # Analysis step 111
        //         # Analysis step 112
        //         # Analysis step 113
        //         # Analysis step 114
        //         # Analysis step 115
        //         # Analysis step 116
        //         # Analysis step 117
        //         # Analysis step 118
        //         # Analysis step 119
        //         # Analysis step 120
        //         # Analysis step 121
        //         # Analysis step 122
        //         # Analysis step 123
        //         # Analysis step 124
        //         # Analysis step 125
        //         # Analysis step 126
        //         # Analysis step 127
        //         # Analysis step 128
        //         # Analysis step 129
        //         # Analysis step 130
        //         # Analysis step 131
        //         # Analysis step 132
        //         # Analysis step 133
        //         # Analysis step 134
        //         # Analysis step 135
        //         # Analysis step 136
        //         # Analysis step 137
        //         # Analysis step 138
        //         # Analysis step 139
        //         # Analysis step 140
        //         # Analysis step 141
        //         # Analysis step 142
        //         # Analysis step 143
        //         # Analysis step 144
        //         # Analysis step 145
        //         # Analysis step 146
        //         # Analysis step 147
        //         # Analysis step 148
        //         # Analysis step 149
        //         # Analysis step 150
        //         # Analysis step 151
        //         # Analysis step 152
        //         # Analysis step 153
        //         # Analysis step 154
        //         # Analysis step 155
        //         # Analysis step 156
        //         # Analysis step 157
        //         # Analysis step 158
        //         # Analysis step 159
        //         # Analysis step 160
        //         # Analysis step 161
        //         # Analysis step 162
        //         # Analysis step 163
        //         # Analysis step 164
        //         # Analysis step 165
        //         # Analysis step 166
        //         # Analysis step 167
        //         # Analysis step 168
        //         # Analysis step 169
        //         # Analysis step 170
        //         # Analysis step 171
        //         # Analysis step 172
        //         # Analysis step 173
        //         # Analysis step 174
        //         # Analysis step 175
        //         # Analysis step 176
        //         # Analysis step 177
        //         # Analysis step 178
        //         # Analysis step 179
        //         # Analysis step 180
        //         # Analysis step 181
        //         # Analysis step 182
        //         # Analysis step 183
        //         # Analysis step 184
        //         # Analysis step 185
        //         # Analysis step 186
        //         # Analysis step 187
        //         # Analysis step 188
        //         # Analysis step 189
        //         # Analysis step 190
        //         # Analysis step 191
        //         # Analysis step 192
        //         # Analysis step 193
        //         # Analysis step 194
        //         # Analysis step 195
        //         # Analysis step 196
        //         # Analysis step 197
        //         # Analysis step 198
        //         # Analysis step 199
        //         
        //         # Main analysis workflow
        //         try:
        //             # Step 1: Preprocess the data
        //             processed_data = preprocess_data(dataset)
        //             
        //             # Step 2: Detect anomalies
        //             anomalies = detect_anomalies(processed_data)
        //             
        //             # Step 3: Calculate statistics
        //             statistics = calculate_advanced_statistics(processed_data)
        //             
        //             # Step 4: Generate recommendations
        //             recommendations = generate_recommendations(processed_data, statistics, anomalies)
        //             
        //             # Compile results
        //             analysis_results.update({
        //                 'processed_data': processed_data,
        //                 'statistics': statistics,
        //                 'anomalies': anomalies,
        //                 'recommendations': recommendations,
        //                 'processing_timestamp': datetime.now().isoformat(),
        //                 'data_quality_score': max(0, 100 - (len(anomalies) / len(processed_data) * 100)) if processed_data else 0
        //             })
        //             
        //             return analysis_results
        //             
        //         except Exception as e:
        //             return {
        //                 'error': str(e),
        //                 'processed_data': [],
        //                 'statistics': {},
        //                 'anomalies': [],
        //                 'recommendations': [f\"Analysis failed: {str(e)}\"]
        //             }
        //     
        //     def _generate_id(self) -> str:
        //         \"\"\"Generate a unique ID.\"\"\"
        //         return hashlib.md5(str(datetime.now()).encode()).hexdigest()[:8]",
        "symbols": [],
        "start_line": 8,
        "end_line": 372,
        "start_col": 0,
        "end_col": 72,
        "children": [
          {
            "id": 3757212589,
            "type": "function",
            "name": "data",
            "content": "def __init__(self):
                    self.data = []
                    self.results = {}",
            "symbols": [],
            "start_line": 9,
            "end_line": 11,
            "start_col": 4,
            "end_col": 25,
            "children": []
          },
          {
            "id": 3757212590,
            "type": "function",
            "name": "data",
            "content": "def validate_input(self, data: Any) -> bool:
                    \"\"\"Validate input data.\"\"\"
                    return data is not None and len(str(data)) > 0",
            "symbols": [],
            "start_line": 14,
            "end_line": 16,
            "start_col": 4,
            "end_col": 54,
            "children": []
          },
          {
            "id": 3757212591,
            "type": "function",
            "name": "category_counts",
            "content": "def analyze_complex_dataset(self, dataset: List[Dict]) -> Dict[str, Any]:
                    \"\"\"Analyze a complex dataset with multiple processing steps.\"\"\"
                    analysis_results = {
                        'processed_data': [],
                        'statistics': {},
                        'anomalies': [],
                        'recommendations': []
                    }
                    
                    def preprocess_data(raw_data: List[Dict]) -> List[Dict]:
                        \"\"\"Clean and preprocess the raw data.\"\"\"
                        processed = []
                        for item in raw_data:
                            if not item or not isinstance(item, dict):
                                continue
                            
                            cleaned_item = {
                                'id': item.get('id', self._generate_id()),
                                'value': float(item.get('value', 0)),
                                'category': str(item.get('category', 'unknown')).lower(),
                                'timestamp': item.get('timestamp', datetime.now().isoformat()),
                                'metadata': item.get('metadata', {})
                            }
                            
                            # Additional cleaning
                            if cleaned_item['value'] < 0:
                                cleaned_item['value'] = abs(cleaned_item['value'])
                                cleaned_item['metadata']['was_negative'] = True
                            
                            processed.append(cleaned_item)
                        
                        return processed
                    
                    def detect_anomalies(data: List[Dict]) -> List[Dict]:
                        \"\"\"Detect anomalies in the dataset.\"\"\"
                        anomalies = []
                        if not data:
                            return anomalies
                        
                        values = [item['value'] for item in data]
                        mean_val = sum(values) / len(values)
                        std_dev = (sum((x - mean_val) ** 2 for x in values) / len(values)) ** 0.5
                        
                        threshold = mean_val + (2 * std_dev)
                        
                        for item in data:
                            if item['value'] > threshold:
                                anomalies.append({
                                    'item_id': item['id'],
                                    'value': item['value'],
                                    'threshold': threshold,
                                    'deviation': item['value'] - mean_val,
                                    'type': 'statistical_outlier'
                                })
                        
                        return anomalies
                    
                    def calculate_advanced_statistics(data: List[Dict]) -> Dict[str, Any]:
                        \"\"\"Calculate comprehensive statistics.\"\"\"
                        if not data:
                            return {}
                        
                        values = [item['value'] for item in data]
                        categories = {}
                        
                        for item in data:
                            cat = item['category']
                            if cat not in categories:
                                categories[cat] = []
                            categories[cat].append(item['value'])
                        
                        stats = {
                            'total_items': len(data),
                            'total_value': sum(values),
                            'mean': sum(values) / len(values),
                            'median': sorted(values)[len(values) // 2],
            //                 'min': min(values),
            //                 'max': max(values),
            //                 'categories': {}
            //             }
            //             
            //             # Category-specific statistics
            //             for cat, cat_values in categories.items():
            //                 stats['categories'][cat] = {
            //                     'count': len(cat_values),
            //                     'mean': sum(cat_values) / len(cat_values),
            //                     'total': sum(cat_values),
            //                     'percentage': (len(cat_values) / len(data)) * 100
            //                 }
            //             
            //             return stats
            //         
            //         def generate_recommendations(data: List[Dict], stats: Dict, anomalies: List[Dict]) -> List[str]:
            //             \"\"\"Generate recommendations based on analysis.\"\"\"
            //             recommendations = []
            //             
            //             if not data:
            //                 recommendations.append(\"No data available for analysis\")
            //                 return recommendations
            //             
            //             # Data quality recommendations
            //             if len(anomalies) > len(data) * 0.1:
            //                 recommendations.append(\"High number of anomalies detected - consider data quality review\")
            //             
            //             # Category distribution recommendations
            //             if 'categories' in stats:
            //                 category_counts = [cat_stats['count'] for cat_stats in stats['categories'].values()]
            //                 if max(category_counts) > len(data) * 0.8:
            //                     recommendations.append(\"Data heavily skewed towards one category - consider balancing\")
            //             
            //             # Value range recommendations
            //             if stats.get('max', 0) > stats.get('mean', 0) * 10:
            //                 recommendations.append(\"Large value range detected - consider normalization\")
            //             
            //             return recommendations
            //         
            //         # Analysis step 1
            //         # Analysis step 2
            //         # Analysis step 3
            //         # Analysis step 4
            //         # Analysis step 5
            //         # Analysis step 6
            //         # Analysis step 7
            //         # Analysis step 8
            //         # Analysis step 9
            //         # Analysis step 10
            //         # Analysis step 11
            //         # Analysis step 12
            //         # Analysis step 13
            //         # Analysis step 14
            //         # Analysis step 15
            //         # Analysis step 16
            //         # Analysis step 17
            //         # Analysis step 18
            //         # Analysis step 19
            //         # Analysis step 20
            //         # Analysis step 21
            //         # Analysis step 22
            //         # Analysis step 23
            //         # Analysis step 24
            //         # Analysis step 25
            //         # Analysis step 26
            //         # Analysis step 27
            //         # Analysis step 28
            //         # Analysis step 29
            //         # Analysis step 30
            //         # Analysis step 31
            //         # Analysis step 32
            //         # Analysis step 33
            //         # Analysis step 34
            //         # Analysis step 35
            //         # Analysis step 36
            //         # Analysis step 37
            //         # Analysis step 38
            //         # Analysis step 39
            //         # Analysis step 40
            //         # Analysis step 41
            //         # Analysis step 42
            //         # Analysis step 43
            //         # Analysis step 44
            //         # Analysis step 45
            //         # Analysis step 46
            //         # Analysis step 47
            //         # Analysis step 48
            //         # Analysis step 49
            //         # Analysis step 50
            //         # Analysis step 51
            //         # Analysis step 52
            //         # Analysis step 53
            //         # Analysis step 54
            //         # Analysis step 55
            //         # Analysis step 56
            //         # Analysis step 57
            //         # Analysis step 58
            //         # Analysis step 59
            //         # Analysis step 60
            //         # Analysis step 61
            //         # Analysis step 62
            //         # Analysis step 63
            //         # Analysis step 64
            //         # Analysis step 65
            //         # Analysis step 66
            //         # Analysis step 67
            //         # Analysis step 68
            //         # Analysis step 69
            //         # Analysis step 70
            //         # Analysis step 71
            //         # Analysis step 72
            //         # Analysis step 73
            //         # Analysis step 74
            //         # Analysis step 75
            //         # Analysis step 76
            //         # Analysis step 77
            //         # Analysis step 78
            //         # Analysis step 79
            //         # Analysis step 80
            //         # Analysis step 81
            //         # Analysis step 82
            //         # Analysis step 83
            //         # Analysis step 84
            //         # Analysis step 85
            //         # Analysis step 86
            //         # Analysis step 87
            //         # Analysis step 88
            //         # Analysis step 89
            //         # Analysis step 90
            //         # Analysis step 91
            //         # Analysis step 92
            //         # Analysis step 93
            //         # Analysis step 94
            //         # Analysis step 95
            //         # Analysis step 96
            //         # Analysis step 97
            //         # Analysis step 98
            //         # Analysis step 99
            //         # Analysis step 100
            //         # Analysis step 101
            //         # Analysis step 102
            //         # Analysis step 103
            //         # Analysis step 104
            //         # Analysis step 105
            //         # Analysis step 106
            //         # Analysis step 107
            //         # Analysis step 108
            //         # Analysis step 109
            //         # Analysis step 110
            //         # Analysis step 111
            //         # Analysis step 112
            //         # Analysis step 113
            //         # Analysis step 114
            //         # Analysis step 115
            //         # Analysis step 116
            //         # Analysis step 117
            //         # Analysis step 118
            //         # Analysis step 119
            //         # Analysis step 120
            //         # Analysis step 121
            //         # Analysis step 122
            //         # Analysis step 123
            //         # Analysis step 124
            //         # Analysis step 125
            //         # Analysis step 126
            //         # Analysis step 127
            //         # Analysis step 128
            //         # Analysis step 129
            //         # Analysis step 130
            //         # Analysis step 131
            //         # Analysis step 132
            //         # Analysis step 133
            //         # Analysis step 134
            //         # Analysis step 135
            //         # Analysis step 136
            //         # Analysis step 137
            //         # Analysis step 138
            //         # Analysis step 139
            //         # Analysis step 140
            //         # Analysis step 141
            //         # Analysis step 142
            //         # Analysis step 143
            //         # Analysis step 144
            //         # Analysis step 145
            //         # Analysis step 146
            //         # Analysis step 147
            //         # Analysis step 148
            //         # Analysis step 149
            //         # Analysis step 150
            //         # Analysis step 151
            //         # Analysis step 152
            //         # Analysis step 153
            //         # Analysis step 154
            //         # Analysis step 155
            //         # Analysis step 156
            //         # Analysis step 157
            //         # Analysis step 158
            //         # Analysis step 159
            //         # Analysis step 160
            //         # Analysis step 161
            //         # Analysis step 162
            //         # Analysis step 163
            //         # Analysis step 164
            //         # Analysis step 165
            //         # Analysis step 166
            //         # Analysis step 167
            //         # Analysis step 168
            //         # Analysis step 169
            //         # Analysis step 170
            //         # Analysis step 171
            //         # Analysis step 172
            //         # Analysis step 173
            //         # Analysis step 174
            //         # Analysis step 175
            //         # Analysis step 176
            //         # Analysis step 177
            //         # Analysis step 178
            //         # Analysis step 179
            //         # Analysis step 180
            //         # Analysis step 181
            //         # Analysis step 182
            //         # Analysis step 183
            //         # Analysis step 184
            //         # Analysis step 185
            //         # Analysis step 186
            //         # Analysis step 187
            //         # Analysis step 188
            //         # Analysis step 189
            //         # Analysis step 190
            //         # Analysis step 191
            //         # Analysis step 192
            //         # Analysis step 193
            //         # Analysis step 194
            //         # Analysis step 195
            //         # Analysis step 196
            //         # Analysis step 197
            //         # Analysis step 198
            //         # Analysis step 199
            //         
            //         # Main analysis workflow
            //         try:
            //             # Step 1: Preprocess the data
            //             processed_data = preprocess_data(dataset)
            //             
            //             # Step 2: Detect anomalies
            //             anomalies = detect_anomalies(processed_data)
            //             
            //             # Step 3: Calculate statistics
            //             statistics = calculate_advanced_statistics(processed_data)
            //             
            //             # Step 4: Generate recommendations
            //             recommendations = generate_recommendations(processed_data, statistics, anomalies)
            //             
            //             # Compile results
            //             analysis_results.update({
            //                 'processed_data': processed_data,
            //                 'statistics': statistics,
            //                 'anomalies': anomalies,
            //                 'recommendations': recommendations,
            //                 'processing_timestamp': datetime.now().isoformat(),
            //                 'data_quality_score': max(0, 100 - (len(anomalies) / len(processed_data) * 100)) if processed_data else 0
            //             })
            //             
            //             return analysis_results
            //             
            //         except Exception as e:
            //             return {
            //                 'error': str(e),
            //                 'processed_data': [],
            //                 'statistics': {},
            //                 'anomalies': [],
            //                 'recommendations': [f\"Analysis failed: {str(e)}\"]
            //             }",
            "symbols": [],
            "start_line": 19,
            "end_line": 368,
            "start_col": 4,
            "end_col": 13,
            "children": []
          },
          {
            "id": 3757212592,
            "type": "function",
            "name": "now",
            "content": "def preprocess_data(raw_data: List[Dict]) -> List[Dict]:
                        \"\"\"Clean and preprocess the raw data.\"\"\"
                        processed = []
                        for item in raw_data:
                            if not item or not isinstance(item, dict):
                                continue
                            
                            cleaned_item = {
                                'id': item.get('id', self._generate_id()),
                                'value': float(item.get('value', 0)),
                                'category': str(item.get('category', 'unknown')).lower(),
                                'timestamp': item.get('timestamp', datetime.now().isoformat()),
                                'metadata': item.get('metadata', {})
                            }
                            
                            # Additional cleaning
                            if cleaned_item['value'] < 0:
                                cleaned_item['value'] = abs(cleaned_item['value'])
                                cleaned_item['metadata']['was_negative'] = True
                            
                            processed.append(cleaned_item)
                        
                        return processed",
            "symbols": [],
            "start_line": 28,
            "end_line": 50,
            "start_col": 8,
            "end_col": 28,
            "children": []
          },
          {
            "id": 3757212593,
            "type": "function",
            "name": "threshold",
            "content": "def detect_anomalies(data: List[Dict]) -> List[Dict]:
                        \"\"\"Detect anomalies in the dataset.\"\"\"
                        anomalies = []
                        if not data:
                            return anomalies
                        
                        values = [item['value'] for item in data]
                        mean_val = sum(values) / len(values)
                        std_dev = (sum((x - mean_val) ** 2 for x in values) / len(values)) ** 0.5
                        
                        threshold = mean_val + (2 * std_dev)
                        
                        for item in data:
                            if item['value'] > threshold:
                                anomalies.append({
                                    'item_id': item['id'],
                                    'value': item['value'],
                                    'threshold': threshold,
                                    'deviation': item['value'] - mean_val,
                                    'type': 'statistical_outlier'
                                })
                        
                        return anomalies",
            "symbols": [],
            "start_line": 52,
            "end_line": 74,
            "start_col": 8,
            "end_col": 28,
            "children": []
          },
          {
            "id": 3757212594,
            "type": "function",
            "name": "Any",
            "content": "def calculate_advanced_statistics(data: List[Dict]) -> Dict[str, Any]:
                        \"\"\"Calculate comprehensive statistics.\"\"\"
                        if not data:
                            return {}
                        
                        values = [item['value'] for item in data]
                        categories = {}
                        
                        for item in data:
                            cat = item['category']
                            if cat not in categories:
                                categories[cat] = []
                            categories[cat].append(item['value'])
                        
                        stats = {
                            'total_items': len(data),
                            'total_value': sum(values),
                            'mean': sum(values) / len(values),
                            'median': sorted(values)[len(values) // 2],
            //                 'min': min(values),
            //                 'max': max(values),
            //                 'categories': {}
            //             }
            //             
            //             # Category-specific statistics
            //             for cat, cat_values in categories.items():
            //                 stats['categories'][cat] = {
            //                     'count': len(cat_values),
            //                     'mean': sum(cat_values) / len(cat_values),
            //                     'total': sum(cat_values),
            //                     'percentage': (len(cat_values) / len(data)) * 100
            //                 }
            //             
            //             return stats",
            "symbols": [],
            "start_line": 76,
            "end_line": 109,
            "start_col": 8,
            "end_col": 24,
            "children": []
          },
          {
            "id": 3757212595,
            "type": "function",
            "name": "category_counts",
            "content": "def generate_recommendations(data: List[Dict], stats: Dict, anomalies: List[Dict]) -> List[str]:
                        \"\"\"Generate recommendations based on analysis.\"\"\"
                        recommendations = []
                        
                        if not data:
                            recommendations.append(\"No data available for analysis\")
                            return recommendations
                        
                        # Data quality recommendations
                        if len(anomalies) > len(data) * 0.1:
                            recommendations.append(\"High number of anomalies detected - consider data quality review\")
                        
                        # Category distribution recommendations
                        if 'categories' in stats:
                            category_counts = [cat_stats['count'] for cat_stats in stats['categories'].values()]
                            if max(category_counts) > len(data) * 0.8:
                                recommendations.append(\"Data heavily skewed towards one category - consider balancing\")
                        
                        # Value range recommendations
                        if stats.get('max', 0) > stats.get('mean', 0) * 10:
                            recommendations.append(\"Large value range detected - consider normalization\")
                        
                        return recommendations",
            "symbols": [],
            "start_line": 111,
            "end_line": 133,
            "start_col": 8,
            "end_col": 34,
            "children": []
          },
          {
            "id": 3757212596,
            "type": "function",
            "name": "datetime",
            "content": "def _generate_id(self) -> str:
                    \"\"\"Generate a unique ID.\"\"\"
                    return hashlib.md5(str(datetime.now()).encode()).hexdigest()[:8]",
            "symbols": [],
            "start_line": 370,
            "end_line": 372,
            "start_col": 4,
            "end_col": 72,
            "children": []
          },
          {
            "id": 3757212597,
            "type": "variable",
            "name": "data",
            "content": "self.data = []",
            "symbols": [],
            "start_line": 10,
            "end_line": 10,
            "start_col": 8,
            "end_col": 22,
            "children": []
          },
          {
            "id": 3757212598,
            "type": "variable",
            "name": "self",
            "content": "self.results = {}",
            "symbols": [],
            "start_line": 11,
            "end_line": 11,
            "start_col": 8,
            "end_col": 25,
            "children": []
          },
          {
            "id": 3757212599,
            "type": "variable",
            "name": "analysis_results",
            "content": "analysis_results = {
                        'processed_data': [],
                        'statistics': {},
                        'anomalies': [],
                        'recommendations': []
                    }",
            "symbols": [],
            "start_line": 21,
            "end_line": 26,
            "start_col": 8,
            "end_col": 9,
            "children": []
          },
          {
            "id": 3757212600,
            "type": "variable",
            "name": "processed",
            "content": "processed = []",
            "symbols": [],
            "start_line": 30,
            "end_line": 30,
            "start_col": 12,
            "end_col": 26,
            "children": []
          },
          {
            "id": 3757212601,
            "type": "variable",
            "name": "cleaned_item",
            "content": "cleaned_item = {
                                'id': item.get('id', self._generate_id()),
                                'value': float(item.get('value', 0)),
                                'category': str(item.get('category', 'unknown')).lower(),
                                'timestamp': item.get('timestamp', datetime.now().isoformat()),
                                'metadata': item.get('metadata', {})
                            }",
            "symbols": [],
            "start_line": 35,
            "end_line": 41,
            "start_col": 16,
            "end_col": 17,
            "children": []
          },
          {
            "id": 3757212602,
            "type": "variable",
            "name": "cleaned_item",
            "content": "cleaned_item['value'] = abs(cleaned_item['value'])",
            "symbols": [],
            "start_line": 45,
            "end_line": 45,
            "start_col": 20,
            "end_col": 70,
            "children": []
          },
          {
            "id": 3757212603,
            "type": "variable",
            "name": "cleaned_item",
            "content": "cleaned_item['metadata']['was_negative'] = True",
            "symbols": [],
            "start_line": 46,
            "end_line": 46,
            "start_col": 20,
            "end_col": 67,
            "children": []
          },
          {
            "id": 3757212604,
            "type": "variable",
            "name": "anomalies",
            "content": "anomalies = []",
            "symbols": [],
            "start_line": 54,
            "end_line": 54,
            "start_col": 12,
            "end_col": 26,
            "children": []
          },
          {
            "id": 3757212605,
            "type": "variable",
            "name": "values",
            "content": "values = [item['value'] for item in data]",
            "symbols": [],
            "start_line": 58,
            "end_line": 58,
            "start_col": 12,
            "end_col": 53,
            "children": []
          },
          {
            "id": 3757212606,
            "type": "variable",
            "name": "mean_val",
            "content": "mean_val = sum(values) / len(values)",
            "symbols": [],
            "start_line": 59,
            "end_line": 59,
            "start_col": 12,
            "end_col": 48,
            "children": []
          },
          {
            "id": 3757212607,
            "type": "variable",
            "name": "std_dev",
            "content": "std_dev = (sum((x - mean_val) ** 2 for x in values) / len(values)) ** 0.5",
            "symbols": [],
            "start_line": 60,
            "end_line": 60,
            "start_col": 12,
            "end_col": 85,
            "children": []
          },
          {
            "id": 3757212608,
            "type": "variable",
            "name": "threshold",
            "content": "threshold = mean_val + (2 * std_dev)",
            "symbols": [],
            "start_line": 62,
            "end_line": 62,
            "start_col": 12,
            "end_col": 48,
            "children": []
          },
          {
            "id": 3757212609,
            "type": "variable",
            "name": "values",
            "content": "values = [item['value'] for item in data]",
            "symbols": [],
            "start_line": 81,
            "end_line": 81,
            "start_col": 12,
            "end_col": 53,
            "children": []
          },
          {
            "id": 3757212610,
            "type": "variable",
            "name": "categories",
            "content": "categories = {}",
            "symbols": [],
            "start_line": 82,
            "end_line": 82,
            "start_col": 12,
            "end_col": 27,
            "children": []
          },
          {
            "id": 3757212611,
            "type": "variable",
            "name": "cat",
            "content": "cat = item['category']",
            "symbols": [],
            "start_line": 85,
            "end_line": 85,
            "start_col": 16,
            "end_col": 38,
            "children": []
          },
          {
            "id": 3757212612,
            "type": "variable",
            "name": "cat",
            "content": "categories[cat] = []",
            "symbols": [],
            "start_line": 87,
            "end_line": 87,
            "start_col": 20,
            "end_col": 40,
            "children": []
          },
          {
            "id": 3757212613,
            "type": "variable",
            "name": "stats",
            "content": "stats = {
                            'total_items': len(data),
                            'total_value': sum(values),
                            'mean': sum(values) / len(values),
                            'median': sorted(values)[len(values) // 2],
            //                 'min': min(values),
            //                 'max': max(values),
            //                 'categories': {}
            //             }",
            "symbols": [],
            "start_line": 90,
            "end_line": 98,
            "start_col": 12,
            "end_col": 13,
            "children": []
          },
          {
            "id": 3757212614,
            "type": "variable",
            "name": "cat",
            "content": "stats['categories'][cat] = {
                                'count': len(cat_values),
                                'mean': sum(cat_values) / len(cat_values),
                                'total': sum(cat_values),
                                'percentage': (len(cat_values) / len(data)) * 100
                            }",
            "symbols": [],
            "start_line": 102,
            "end_line": 107,
            "start_col": 16,
            "end_col": 17,
            "children": []
          },
          {
            "id": 3757212615,
            "type": "variable",
            "name": "recommendations",
            "content": "recommendations = []",
            "symbols": [],
            "start_line": 113,
            "end_line": 113,
            "start_col": 12,
            "end_col": 32,
            "children": []
          },
          {
            "id": 3757212616,
            "type": "variable",
            "name": "category_counts",
            "content": "category_counts = [cat_stats['count'] for cat_stats in stats['categories'].values()]",
            "symbols": [],
            "start_line": 125,
            "end_line": 125,
            "start_col": 16,
            "end_col": 100,
            "children": []
          },
          {
            "id": 3757212617,
            "type": "variable",
            "name": "processed_data",
            "content": "processed_data = preprocess_data(dataset)",
            "symbols": [],
            "start_line": 338,
            "end_line": 338,
            "start_col": 12,
            "end_col": 53,
            "children": []
          },
          {
            "id": 3757212618,
            "type": "variable",
            "name": "anomalies",
            "content": "anomalies = detect_anomalies(processed_data)",
            "symbols": [],
            "start_line": 341,
            "end_line": 341,
            "start_col": 12,
            "end_col": 56,
            "children": []
          },
          {
            "id": 3757212619,
            "type": "variable",
            "name": "statistics",
            "content": "statistics = calculate_advanced_statistics(processed_data)",
            "symbols": [],
            "start_line": 344,
            "end_line": 344,
            "start_col": 12,
            "end_col": 70,
            "children": []
          },
          {
            "id": 3757212620,
            "type": "variable",
            "name": "recommendations",
            "content": "recommendations = generate_recommendations(processed_data, statistics, anomalies)",
            "symbols": [],
            "start_line": 347,
            "end_line": 347,
            "start_col": 12,
            "end_col": 93,
            "children": []
          },
          {
            "id": 3757212621,
            "type": "class",
            "name": "category_counts",
            "content": "class DataAnalyzer:
                def __init__(self):
                    self.data = []
                    self.results = {}
                
                # Small function - should not trigger nested extraction
                def validate_input(self, data: Any) -> bool:
                    \"\"\"Validate input data.\"\"\"
                    return data is not None and len(str(data)) > 0
                
                # Large function - should trigger nested extraction
                def analyze_complex_dataset(self, dataset: List[Dict]) -> Dict[str, Any]:
                    \"\"\"Analyze a complex dataset with multiple processing steps.\"\"\"
                    analysis_results = {
                        'processed_data': [],
                        'statistics': {},
                        'anomalies': [],
                        'recommendations': []
                    }
                    
                    def preprocess_data(raw_data: List[Dict]) -> List[Dict]:
                        \"\"\"Clean and preprocess the raw data.\"\"\"
                        processed = []
                        for item in raw_data:
                            if not item or not isinstance(item, dict):
                                continue
                            
                            cleaned_item = {
                                'id': item.get('id', self._generate_id()),
                                'value': float(item.get('value', 0)),
                                'category': str(item.get('category', 'unknown')).lower(),
                                'timestamp': item.get('timestamp', datetime.now().isoformat()),
                                'metadata': item.get('metadata', {})
                            }
                            
                            # Additional cleaning
                            if cleaned_item['value'] < 0:
                                cleaned_item['value'] = abs(cleaned_item['value'])
                                cleaned_item['metadata']['was_negative'] = True
                            
                            processed.append(cleaned_item)
                        
                        return processed
                    
                    def detect_anomalies(data: List[Dict]) -> List[Dict]:
                        \"\"\"Detect anomalies in the dataset.\"\"\"
                        anomalies = []
                        if not data:
                            return anomalies
                        
                        values = [item['value'] for item in data]
                        mean_val = sum(values) / len(values)
                        std_dev = (sum((x - mean_val) ** 2 for x in values) / len(values)) ** 0.5
                        
                        threshold = mean_val + (2 * std_dev)
                        
                        for item in data:
                            if item['value'] > threshold:
                                anomalies.append({
                                    'item_id': item['id'],
                                    'value': item['value'],
                                    'threshold': threshold,
                                    'deviation': item['value'] - mean_val,
                                    'type': 'statistical_outlier'
                                })
                        
                        return anomalies
                    
                    def calculate_advanced_statistics(data: List[Dict]) -> Dict[str, Any]:
                        \"\"\"Calculate comprehensive statistics.\"\"\"
                        if not data:
                            return {}
                        
                        values = [item['value'] for item in data]
                        categories = {}
                        
                        for item in data:
                            cat = item['category']
                            if cat not in categories:
                                categories[cat] = []
                            categories[cat].append(item['value'])
                        
                        stats = {
                            'total_items': len(data),
                            'total_value': sum(values),
                            'mean': sum(values) / len(values),
                            'median': sorted(values)[len(values) // 2],
            //                 'min': min(values),
            //                 'max': max(values),
            //                 'categories': {}
            //             }
            //             
            //             # Category-specific statistics
            //             for cat, cat_values in categories.items():
            //                 stats['categories'][cat] = {
            //                     'count': len(cat_values),
            //                     'mean': sum(cat_values) / len(cat_values),
            //                     'total': sum(cat_values),
            //                     'percentage': (len(cat_values) / len(data)) * 100
            //                 }
            //             
            //             return stats
            //         
            //         def generate_recommendations(data: List[Dict], stats: Dict, anomalies: List[Dict]) -> List[str]:
            //             \"\"\"Generate recommendations based on analysis.\"\"\"
            //             recommendations = []
            //             
            //             if not data:
            //                 recommendations.append(\"No data available for analysis\")
            //                 return recommendations
            //             
            //             # Data quality recommendations
            //             if len(anomalies) > len(data) * 0.1:
            //                 recommendations.append(\"High number of anomalies detected - consider data quality review\")
            //             
            //             # Category distribution recommendations
            //             if 'categories' in stats:
            //                 category_counts = [cat_stats['count'] for cat_stats in stats['categories'].values()]
            //                 if max(category_counts) > len(data) * 0.8:
            //                     recommendations.append(\"Data heavily skewed towards one category - consider balancing\")
            //             
            //             # Value range recommendations
            //             if stats.get('max', 0) > stats.get('mean', 0) * 10:
            //                 recommendations.append(\"Large value range detected - consider normalization\")
            //             
            //             return recommendations
            //         
            //         # Analysis step 1
            //         # Analysis step 2
            //         # Analysis step 3
            //         # Analysis step 4
            //         # Analysis step 5
            //         # Analysis step 6
            //         # Analysis step 7
            //         # Analysis step 8
            //         # Analysis step 9
            //         # Analysis step 10
            //         # Analysis step 11
            //         # Analysis step 12
            //         # Analysis step 13
            //         # Analysis step 14
            //         # Analysis step 15
            //         # Analysis step 16
            //         # Analysis step 17
            //         # Analysis step 18
            //         # Analysis step 19
            //         # Analysis step 20
            //         # Analysis step 21
            //         # Analysis step 22
            //         # Analysis step 23
            //         # Analysis step 24
            //         # Analysis step 25
            //         # Analysis step 26
            //         # Analysis step 27
            //         # Analysis step 28
            //         # Analysis step 29
            //         # Analysis step 30
            //         # Analysis step 31
            //         # Analysis step 32
            //         # Analysis step 33
            //         # Analysis step 34
            //         # Analysis step 35
            //         # Analysis step 36
            //         # Analysis step 37
            //         # Analysis step 38
            //         # Analysis step 39
            //         # Analysis step 40
            //         # Analysis step 41
            //         # Analysis step 42
            //         # Analysis step 43
            //         # Analysis step 44
            //         # Analysis step 45
            //         # Analysis step 46
            //         # Analysis step 47
            //         # Analysis step 48
            //         # Analysis step 49
            //         # Analysis step 50
            //         # Analysis step 51
            //         # Analysis step 52
            //         # Analysis step 53
            //         # Analysis step 54
            //         # Analysis step 55
            //         # Analysis step 56
            //         # Analysis step 57
            //         # Analysis step 58
            //         # Analysis step 59
            //         # Analysis step 60
            //         # Analysis step 61
            //         # Analysis step 62
            //         # Analysis step 63
            //         # Analysis step 64
            //         # Analysis step 65
            //         # Analysis step 66
            //         # Analysis step 67
            //         # Analysis step 68
            //         # Analysis step 69
            //         # Analysis step 70
            //         # Analysis step 71
            //         # Analysis step 72
            //         # Analysis step 73
            //         # Analysis step 74
            //         # Analysis step 75
            //         # Analysis step 76
            //         # Analysis step 77
            //         # Analysis step 78
            //         # Analysis step 79
            //         # Analysis step 80
            //         # Analysis step 81
            //         # Analysis step 82
            //         # Analysis step 83
            //         # Analysis step 84
            //         # Analysis step 85
            //         # Analysis step 86
            //         # Analysis step 87
            //         # Analysis step 88
            //         # Analysis step 89
            //         # Analysis step 90
            //         # Analysis step 91
            //         # Analysis step 92
            //         # Analysis step 93
            //         # Analysis step 94
            //         # Analysis step 95
            //         # Analysis step 96
            //         # Analysis step 97
            //         # Analysis step 98
            //         # Analysis step 99
            //         # Analysis step 100
            //         # Analysis step 101
            //         # Analysis step 102
            //         # Analysis step 103
            //         # Analysis step 104
            //         # Analysis step 105
            //         # Analysis step 106
            //         # Analysis step 107
            //         # Analysis step 108
            //         # Analysis step 109
            //         # Analysis step 110
            //         # Analysis step 111
            //         # Analysis step 112
            //         # Analysis step 113
            //         # Analysis step 114
            //         # Analysis step 115
            //         # Analysis step 116
            //         # Analysis step 117
            //         # Analysis step 118
            //         # Analysis step 119
            //         # Analysis step 120
            //         # Analysis step 121
            //         # Analysis step 122
            //         # Analysis step 123
            //         # Analysis step 124
            //         # Analysis step 125
            //         # Analysis step 126
            //         # Analysis step 127
            //         # Analysis step 128
            //         # Analysis step 129
            //         # Analysis step 130
            //         # Analysis step 131
            //         # Analysis step 132
            //         # Analysis step 133
            //         # Analysis step 134
            //         # Analysis step 135
            //         # Analysis step 136
            //         # Analysis step 137
            //         # Analysis step 138
            //         # Analysis step 139
            //         # Analysis step 140
            //         # Analysis step 141
            //         # Analysis step 142
            //         # Analysis step 143
            //         # Analysis step 144
            //         # Analysis step 145
            //         # Analysis step 146
            //         # Analysis step 147
            //         # Analysis step 148
            //         # Analysis step 149
            //         # Analysis step 150
            //         # Analysis step 151
            //         # Analysis step 152
            //         # Analysis step 153
            //         # Analysis step 154
            //         # Analysis step 155
            //         # Analysis step 156
            //         # Analysis step 157
            //         # Analysis step 158
            //         # Analysis step 159
            //         # Analysis step 160
            //         # Analysis step 161
            //         # Analysis step 162
            //         # Analysis step 163
            //         # Analysis step 164
            //         # Analysis step 165
            //         # Analysis step 166
            //         # Analysis step 167
            //         # Analysis step 168
            //         # Analysis step 169
            //         # Analysis step 170
            //         # Analysis step 171
            //         # Analysis step 172
            //         # Analysis step 173
            //         # Analysis step 174
            //         # Analysis step 175
            //         # Analysis step 176
            //         # Analysis step 177
            //         # Analysis step 178
            //         # Analysis step 179
            //         # Analysis step 180
            //         # Analysis step 181
            //         # Analysis step 182
            //         # Analysis step 183
            //         # Analysis step 184
            //         # Analysis step 185
            //         # Analysis step 186
            //         # Analysis step 187
            //         # Analysis step 188
            //         # Analysis step 189
            //         # Analysis step 190
            //         # Analysis step 191
            //         # Analysis step 192
            //         # Analysis step 193
            //         # Analysis step 194
            //         # Analysis step 195
            //         # Analysis step 196
            //         # Analysis step 197
            //         # Analysis step 198
            //         # Analysis step 199
            //         
            //         # Main analysis workflow
            //         try:
            //             # Step 1: Preprocess the data
            //             processed_data = preprocess_data(dataset)
            //             
            //             # Step 2: Detect anomalies
            //             anomalies = detect_anomalies(processed_data)
            //             
            //             # Step 3: Calculate statistics
            //             statistics = calculate_advanced_statistics(processed_data)
            //             
            //             # Step 4: Generate recommendations
            //             recommendations = generate_recommendations(processed_data, statistics, anomalies)
            //             
            //             # Compile results
            //             analysis_results.update({
            //                 'processed_data': processed_data,
            //                 'statistics': statistics,
            //                 'anomalies': anomalies,
            //                 'recommendations': recommendations,
            //                 'processing_timestamp': datetime.now().isoformat(),
            //                 'data_quality_score': max(0, 100 - (len(anomalies) / len(processed_data) * 100)) if processed_data else 0
            //             })
            //             
            //             return analysis_results
            //             
            //         except Exception as e:
            //             return {
            //                 'error': str(e),
            //                 'processed_data': [],
            //                 'statistics': {},
            //                 'anomalies': [],
            //                 'recommendations': [f\"Analysis failed: {str(e)}\"]
            //             }
            //     
            //     def _generate_id(self) -> str:
            //         \"\"\"Generate a unique ID.\"\"\"
            //         return hashlib.md5(str(datetime.now()).encode()).hexdigest()[:8]",
            "symbols": [],
            "start_line": 8,
            "end_line": 372,
            "start_col": 0,
            "end_col": 72,
            "children": []
          }
        ]
      },
      {
        "id": 3757212622,
        "type": "variable",
        "name": "data",
        "content": "self.data = []",
        "symbols": [],
        "start_line": 10,
        "end_line": 10,
        "start_col": 8,
        "end_col": 22,
        "children": []
      },
      {
        "id": 3757212623,
        "type": "variable",
        "name": "self",
        "content": "self.results = {}",
        "symbols": [],
        "start_line": 11,
        "end_line": 11,
        "start_col": 8,
        "end_col": 25,
        "children": []
      },
      {
        "id": 3757212624,
        "type": "variable",
        "name": "analysis_results",
        "content": "analysis_results = {
                    'processed_data': [],
                    'statistics': {},
                    'anomalies': [],
                    'recommendations': []
                }",
        "symbols": [],
        "start_line": 21,
        "end_line": 26,
        "start_col": 8,
        "end_col": 9,
        "children": []
      },
      {
        "id": 3757212625,
        "type": "variable",
        "name": "processed",
        "content": "processed = []",
        "symbols": [],
        "start_line": 30,
        "end_line": 30,
        "start_col": 12,
        "end_col": 26,
        "children": []
      },
      {
        "id": 3757212626,
        "type": "variable",
        "name": "cleaned_item",
        "content": "cleaned_item = {
                            'id': item.get('id', self._generate_id()),
                            'value': float(item.get('value', 0)),
                            'category': str(item.get('category', 'unknown')).lower(),
                            'timestamp': item.get('timestamp', datetime.now().isoformat()),
                            'metadata': item.get('metadata', {})
                        }",
        "symbols": [],
        "start_line": 35,
        "end_line": 41,
        "start_col": 16,
        "end_col": 17,
        "children": []
      },
      {
        "id": 3757212627,
        "type": "variable",
        "name": "cleaned_item",
        "content": "cleaned_item['value'] = abs(cleaned_item['value'])",
        "symbols": [],
        "start_line": 45,
        "end_line": 45,
        "start_col": 20,
        "end_col": 70,
        "children": []
      },
      {
        "id": 3757212628,
        "type": "variable",
        "name": "cleaned_item",
        "content": "cleaned_item['metadata']['was_negative'] = True",
        "symbols": [],
        "start_line": 46,
        "end_line": 46,
        "start_col": 20,
        "end_col": 67,
        "children": []
      },
      {
        "id": 3757212629,
        "type": "variable",
        "name": "anomalies",
        "content": "anomalies = []",
        "symbols": [],
        "start_line": 54,
        "end_line": 54,
        "start_col": 12,
        "end_col": 26,
        "children": []
      },
      {
        "id": 3757212630,
        "type": "variable",
        "name": "values",
        "content": "values = [item['value'] for item in data]",
        "symbols": [],
        "start_line": 58,
        "end_line": 58,
        "start_col": 12,
        "end_col": 53,
        "children": []
      },
      {
        "id": 3757212631,
        "type": "variable",
        "name": "mean_val",
        "content": "mean_val = sum(values) / len(values)",
        "symbols": [],
        "start_line": 59,
        "end_line": 59,
        "start_col": 12,
        "end_col": 48,
        "children": []
      },
      {
        "id": 3757212632,
        "type": "variable",
        "name": "std_dev",
        "content": "std_dev = (sum((x - mean_val) ** 2 for x in values) / len(values)) ** 0.5",
        "symbols": [],
        "start_line": 60,
        "end_line": 60,
        "start_col": 12,
        "end_col": 85,
        "children": []
      },
      {
        "id": 3757212633,
        "type": "variable",
        "name": "threshold",
        "content": "threshold = mean_val + (2 * std_dev)",
        "symbols": [],
        "start_line": 62,
        "end_line": 62,
        "start_col": 12,
        "end_col": 48,
        "children": []
      },
      {
        "id": 3757212634,
        "type": "variable",
        "name": "values",
        "content": "values = [item['value'] for item in data]",
        "symbols": [],
        "start_line": 81,
        "end_line": 81,
        "start_col": 12,
        "end_col": 53,
        "children": []
      },
      {
        "id": 3757212635,
        "type": "variable",
        "name": "categories",
        "content": "categories = {}",
        "symbols": [],
        "start_line": 82,
        "end_line": 82,
        "start_col": 12,
        "end_col": 27,
        "children": []
      },
      {
        "id": 3757212636,
        "type": "variable",
        "name": "cat",
        "content": "cat = item['category']",
        "symbols": [],
        "start_line": 85,
        "end_line": 85,
        "start_col": 16,
        "end_col": 38,
        "children": []
      },
      {
        "id": 3757212637,
        "type": "variable",
        "name": "cat",
        "content": "categories[cat] = []",
        "symbols": [],
        "start_line": 87,
        "end_line": 87,
        "start_col": 20,
        "end_col": 40,
        "children": []
      },
      {
        "id": 3757212638,
        "type": "variable",
        "name": "stats",
        "content": "stats = {
                        'total_items': len(data),
                        'total_value': sum(values),
                        'mean': sum(values) / len(values),
                        'median': sorted(values)[len(values) // 2],
        //                 'min': min(values),
        //                 'max': max(values),
        //                 'categories': {}
        //             }",
        "symbols": [],
        "start_line": 90,
        "end_line": 98,
        "start_col": 12,
        "end_col": 13,
        "children": []
      },
      {
        "id": 3757212639,
        "type": "variable",
        "name": "cat",
        "content": "stats['categories'][cat] = {
                            'count': len(cat_values),
                            'mean': sum(cat_values) / len(cat_values),
                            'total': sum(cat_values),
                            'percentage': (len(cat_values) / len(data)) * 100
                        }",
        "symbols": [],
        "start_line": 102,
        "end_line": 107,
        "start_col": 16,
        "end_col": 17,
        "children": []
      },
      {
        "id": 3757212640,
        "type": "variable",
        "name": "recommendations",
        "content": "recommendations = []",
        "symbols": [],
        "start_line": 113,
        "end_line": 113,
        "start_col": 12,
        "end_col": 32,
        "children": []
      },
      {
        "id": 3757212641,
        "type": "variable",
        "name": "category_counts",
        "content": "category_counts = [cat_stats['count'] for cat_stats in stats['categories'].values()]",
        "symbols": [],
        "start_line": 125,
        "end_line": 125,
        "start_col": 16,
        "end_col": 100,
        "children": []
      },
      {
        "id": 3757212642,
        "type": "variable",
        "name": "processed_data",
        "content": "processed_data = preprocess_data(dataset)",
        "symbols": [],
        "start_line": 338,
        "end_line": 338,
        "start_col": 12,
        "end_col": 53,
        "children": []
      },
      {
        "id": 3757212643,
        "type": "variable",
        "name": "anomalies",
        "content": "anomalies = detect_anomalies(processed_data)",
        "symbols": [],
        "start_line": 341,
        "end_line": 341,
        "start_col": 12,
        "end_col": 56,
        "children": []
      },
      {
        "id": 3757212644,
        "type": "variable",
        "name": "statistics",
        "content": "statistics = calculate_advanced_statistics(processed_data)",
        "symbols": [],
        "start_line": 344,
        "end_line": 344,
        "start_col": 12,
        "end_col": 70,
        "children": []
      },
      {
        "id": 3757212645,
        "type": "variable",
        "name": "recommendations",
        "content": "recommendations = generate_recommendations(processed_data, statistics, anomalies)",
        "symbols": [],
        "start_line": 347,
        "end_line": 347,
        "start_col": 12,
        "end_col": 93,
        "children": []
      }
    ],
    "relationships": []
  },
  "/tmp/nested_function_test_ggnm5sdz/large_processor.ts": {
    "language": "typescript",
    "id": 1477333440,
    "file_path": "/tmp/nested_function_test_ggnm5sdz/large_processor.ts",
    "content_hash": "e53d53235ffcc15922ace474f50e495554aa47dcc574118edf0770a620951a11",
    "blocks": [
      {
        "id": 1477333441,
        "type": "function",
        "name": "validateInput",
        "content": "validateInput(input: string): boolean {
                if (!input) return false;
                return input.length > 0;
            }",
        "symbols": [],
        "start_line": 7,
        "end_line": 10,
        "start_col": 4,
        "end_col": 5,
        "children": []
      },
      {
        "id": 1477333447,
        "type": "function",
        "name": "processLargeDataset",
        "content": "processLargeDataset(dataset: any[]): ProcessedData {
                const results: ProcessedData = {
                    processed: [],
                    errors: [],
                    statistics: {}
                };
                
                function cleanData(rawData: any[]): any[] {
            // [BLOCK_REF:1477333442]
        // }
        //         
        //         function validateData(data: any[]): ValidationResult {
        //     // [BLOCK_REF:1477333443]
        // }
        //         
        //         function transformData(validData: any[]): any[] {
        //             return validData.map(item => ({
        //     // [BLOCK_REF:1477333445]
        // });
        //         }
        //         
        //         function generateStatistics(data: any[]): Statistics {
        //     // [BLOCK_REF:1477333446]
        // }
        //         
        //         // Processing step 1
        //         // Processing step 2
        //         // Processing step 3
        //         // Processing step 4
        //         // Processing step 5
        //         // Processing step 6
        //         // Processing step 7
        //         // Processing step 8
        //         // Processing step 9
        //         // Processing step 10
        //         // Processing step 11
        //         // Processing step 12
        //         // Processing step 13
        //         // Processing step 14
        //         // Processing step 15
        //         // Processing step 16
        //         // Processing step 17
        //         // Processing step 18
        //         // Processing step 19
        //         // Processing step 20
        //         // Processing step 21
        //         // Processing step 22
        //         // Processing step 23
        //         // Processing step 24
        //         // Processing step 25
        //         // Processing step 26
        //         // Processing step 27
        //         // Processing step 28
        //         // Processing step 29
        //         // Processing step 30
        //         // Processing step 31
        //         // Processing step 32
        //         // Processing step 33
        //         // Processing step 34
        //         // Processing step 35
        //         // Processing step 36
        //         // Processing step 37
        //         // Processing step 38
        //         // Processing step 39
        //         // Processing step 40
        //         // Processing step 41
        //         // Processing step 42
        //         // Processing step 43
        //         // Processing step 44
        //         // Processing step 45
        //         // Processing step 46
        //         // Processing step 47
        //         // Processing step 48
        //         // Processing step 49
        //         // Processing step 50
        //         // Processing step 51
        //         // Processing step 52
        //         // Processing step 53
        //         // Processing step 54
        //         // Processing step 55
        //         // Processing step 56
        //         // Processing step 57
        //         // Processing step 58
        //         // Processing step 59
        //         // Processing step 60
        //         // Processing step 61
        //         // Processing step 62
        //         // Processing step 63
        //         // Processing step 64
        //         // Processing step 65
        //         // Processing step 66
        //         // Processing step 67
        //         // Processing step 68
        //         // Processing step 69
        //         // Processing step 70
        //         // Processing step 71
        //         // Processing step 72
        //         // Processing step 73
        //         // Processing step 74
        //         // Processing step 75
        //         // Processing step 76
        //         // Processing step 77
        //         // Processing step 78
        //         // Processing step 79
        //         // Processing step 80
        //         // Processing step 81
        //         // Processing step 82
        //         // Processing step 83
        //         // Processing step 84
        //         // Processing step 85
        //         // Processing step 86
        //         // Processing step 87
        //         // Processing step 88
        //         // Processing step 89
        //         // Processing step 90
        //         // Processing step 91
        //         // Processing step 92
        //         // Processing step 93
        //         // Processing step 94
        //         // Processing step 95
        //         // Processing step 96
        //         // Processing step 97
        //         // Processing step 98
        //         // Processing step 99
        //         // Processing step 100
        //         // Processing step 101
        //         // Processing step 102
        //         // Processing step 103
        //         // Processing step 104
        //         // Processing step 105
        //         // Processing step 106
        //         // Processing step 107
        //         // Processing step 108
        //         // Processing step 109
        //         // Processing step 110
        //         // Processing step 111
        //         // Processing step 112
        //         // Processing step 113
        //         // Processing step 114
        //         // Processing step 115
        //         // Processing step 116
        //         // Processing step 117
        //         // Processing step 118
        //         // Processing step 119
        //         // Processing step 120
        //         // Processing step 121
        //         // Processing step 122
        //         // Processing step 123
        //         // Processing step 124
        //         // Processing step 125
        //         // Processing step 126
        //         // Processing step 127
        //         // Processing step 128
        //         // Processing step 129
        //         // Processing step 130
        //         // Processing step 131
        //         // Processing step 132
        //         // Processing step 133
        //         // Processing step 134
        //         // Processing step 135
        //         // Processing step 136
        //         // Processing step 137
        //         // Processing step 138
        //         // Processing step 139
        //         // Processing step 140
        //         // Processing step 141
        //         // Processing step 142
        //         // Processing step 143
        //         // Processing step 144
        //         // Processing step 145
        //         // Processing step 146
        //         // Processing step 147
        //         // Processing step 148
        //         // Processing step 149
        //         // Processing step 150
        //         // Processing step 151
        //         // Processing step 152
        //         // Processing step 153
        //         // Processing step 154
        //         // Processing step 155
        //         // Processing step 156
        //         // Processing step 157
        //         // Processing step 158
        //         // Processing step 159
        //         // Processing step 160
        //         // Processing step 161
        //         // Processing step 162
        //         // Processing step 163
        //         // Processing step 164
        //         // Processing step 165
        //         // Processing step 166
        //         // Processing step 167
        //         // Processing step 168
        //         // Processing step 169
        //         // Processing step 170
        //         // Processing step 171
        //         // Processing step 172
        //         // Processing step 173
        //         // Processing step 174
        //         // Processing step 175
        //         // Processing step 176
        //         // Processing step 177
        //         // Processing step 178
        //         // Processing step 179
        //         // Processing step 180
        //         // Processing step 181
        //         // Processing step 182
        //         // Processing step 183
        //         // Processing step 184
        //         // Processing step 185
        //         // Processing step 186
        //         // Processing step 187
        //         // Processing step 188
        //         // Processing step 189
        //         // Processing step 190
        //         // Processing step 191
        //         // Processing step 192
        //         // Processing step 193
        //         // Processing step 194
        //         // Processing step 195
        //         // Processing step 196
        //         // Processing step 197
        //         // Processing step 198
        //         // Processing step 199
        //         // Processing step 200
        //         // Processing step 201
        //         // Processing step 202
        //         // Processing step 203
        //         // Processing step 204
        //         // Processing step 205
        //         // Processing step 206
        //         // Processing step 207
        //         // Processing step 208
        //         // Processing step 209
        //         // Processing step 210
        //         // Processing step 211
        //         // Processing step 212
        //         // Processing step 213
        //         // Processing step 214
        //         // Processing step 215
        //         // Processing step 216
        //         // Processing step 217
        //         // Processing step 218
        //         // Processing step 219
        //         // Processing step 220
        //         // Processing step 221
        //         // Processing step 222
        //         // Processing step 223
        //         // Processing step 224
        //         // Processing step 225
        //         // Processing step 226
        //         // Processing step 227
        //         // Processing step 228
        //         // Processing step 229
        //         // Processing step 230
        //         // Processing step 231
        //         // Processing step 232
        //         // Processing step 233
        //         // Processing step 234
        //         // Processing step 235
        //         // Processing step 236
        //         // Processing step 237
        //         // Processing step 238
        //         // Processing step 239
        //         // Processing step 240
        //         // Processing step 241
        //         // Processing step 242
        //         // Processing step 243
        //         // Processing step 244
        //         // Processing step 245
        //         // Processing step 246
        //         // Processing step 247
        //         // Processing step 248
        //         // Processing step 249
        //         
        //         // Main processing logic
        //         try {
        //             const cleaned = cleanData(dataset);
        //             const validated = validateData(cleaned);
        //             const transformed = transformData(validated.valid);
        //             const statistics = generateStatistics(transformed);
        //             
        //             results.processed = transformed;
        //             results.errors = validated.invalid;
        //             results.statistics = statistics;
        //             
        //             return results;
        //         } catch (error) {
        //             console.error('Processing failed:', error);
        //             throw error;
        //         }
        //     }",
        "symbols": [],
        "start_line": 13,
        "end_line": 357,
        "start_col": 4,
        "end_col": 5,
        "children": [
          {
            "id": 1477333442,
            "type": "function",
            "name": "cleanData",
            "content": "function cleanData(rawData: any[]): any[] {
                        const cleaned = [];
                        for (const item of rawData) {
                            if (item && typeof item === 'object') {
                                cleaned.push({
                                    id: item.id || generateId(),
                                    value: item.value || 0,
                                    timestamp: item.timestamp || Date.now()
                                });
                            }
                        }
                        return cleaned;
                    }",
            "symbols": [],
            "start_line": 20,
            "end_line": 32,
            "start_col": 8,
            "end_col": 9,
            "children": []
          },
          {
            "id": 1477333443,
            "type": "function",
            "name": "validateData",
            "content": "function validateData(data: any[]): ValidationResult {
                        const result: ValidationResult = {
                            valid: [],
                            invalid: [],
                            warnings: []
                        };
                        
                        for (const item of data) {
                            if (!item.id) {
                                result.invalid.push(item);
                                continue;
                            }
                            
                            if (item.value < 0) {
                                result.warnings.push(`Negative value for item ${item.id}`);
                            }
                            
                            result.valid.push(item);
                        }
                        
                        return result;
                    }",
            "symbols": [],
            "start_line": 34,
            "end_line": 55,
            "start_col": 8,
            "end_col": 9,
            "children": []
          },
          {
            "id": 1477333444,
            "type": "function",
            "name": "transformData",
            "content": "function transformData(validData: any[]): any[] {
                        return validData.map(item => ({
                            ...item,
                            processed: true,
                            processedAt: new Date().toISOString(),
                            hash: generateHash(item)
                        }));
                    }",
            "symbols": [],
            "start_line": 57,
            "end_line": 64,
            "start_col": 8,
            "end_col": 9,
            "children": []
          },
          {
            "id": 1477333445,
            "type": "function",
            "name": "anonymous",
            "content": "item => ({
                            ...item,
                            processed: true,
                            processedAt: new Date().toISOString(),
                            hash: generateHash(item)
                        })",
            "symbols": [],
            "start_line": 58,
            "end_line": 63,
            "start_col": 33,
            "end_col": 14,
            "children": []
          },
          {
            "id": 1477333446,
            "type": "function",
            "name": "generateStatistics",
            "content": "function generateStatistics(data: any[]): Statistics {
                        const stats: Statistics = {
                            total: data.length,
                            average: 0,
                            min: Number.MAX_VALUE,
                            max: Number.MIN_VALUE,
                            distribution: {}
                        };
                        
                        let sum = 0;
                        for (const item of data) {
                            const value = item.value || 0;
                            sum += value;
                            
                            if (value < stats.min) stats.min = value;
                            if (value > stats.max) stats.max = value;
                            
                            const bucket = Math.floor(value / 10) * 10;
                            stats.distribution[bucket] = (stats.distribution[bucket] || 0) + 1;
                        }
                        
                        stats.average = data.length > 0 ? sum / data.length : 0;
                        return stats;
                    }",
            "symbols": [],
            "start_line": 66,
            "end_line": 89,
            "start_col": 8,
            "end_col": 9,
            "children": []
          }
        ]
      },
      {
        "id": 1477333448,
        "type": "function",
        "name": "cleanData",
        "content": "function cleanData(rawData: any[]): any[] {
                    const cleaned = [];
                    for (const item of rawData) {
                        if (item && typeof item === 'object') {
                            cleaned.push({
                                id: item.id || generateId(),
                                value: item.value || 0,
                                timestamp: item.timestamp || Date.now()
                            });
                        }
                    }
                    return cleaned;
                }",
        "symbols": [],
        "start_line": 20,
        "end_line": 32,
        "start_col": 8,
        "end_col": 9,
        "children": []
      },
      {
        "id": 1477333449,
        "type": "function",
        "name": "validateData",
        "content": "function validateData(data: any[]): ValidationResult {
                    const result: ValidationResult = {
                        valid: [],
                        invalid: [],
                        warnings: []
                    };
                    
                    for (const item of data) {
                        if (!item.id) {
                            result.invalid.push(item);
                            continue;
                        }
                        
                        if (item.value < 0) {
                            result.warnings.push(`Negative value for item ${item.id}`);
                        }
                        
                        result.valid.push(item);
                    }
                    
                    return result;
                }",
        "symbols": [],
        "start_line": 34,
        "end_line": 55,
        "start_col": 8,
        "end_col": 9,
        "children": []
      },
      {
        "id": 1477333450,
        "type": "function",
        "name": "transformData",
        "content": "function transformData(validData: any[]): any[] {
                    return validData.map(item => ({
                        ...item,
                        processed: true,
                        processedAt: new Date().toISOString(),
                        hash: generateHash(item)
                    }));
                }",
        "symbols": [],
        "start_line": 57,
        "end_line": 64,
        "start_col": 8,
        "end_col": 9,
        "children": []
      },
      {
        "id": 1477333451,
        "type": "function",
        "name": "anonymous",
        "content": "item => ({
                        ...item,
                        processed: true,
                        processedAt: new Date().toISOString(),
                        hash: generateHash(item)
                    })",
        "symbols": [],
        "start_line": 58,
        "end_line": 63,
        "start_col": 33,
        "end_col": 14,
        "children": []
      },
      {
        "id": 1477333452,
        "type": "function",
        "name": "generateStatistics",
        "content": "function generateStatistics(data: any[]): Statistics {
                    const stats: Statistics = {
                        total: data.length,
                        average: 0,
                        min: Number.MAX_VALUE,
                        max: Number.MIN_VALUE,
                        distribution: {}
                    };
                    
                    let sum = 0;
                    for (const item of data) {
                        const value = item.value || 0;
                        sum += value;
                        
                        if (value < stats.min) stats.min = value;
                        if (value > stats.max) stats.max = value;
                        
                        const bucket = Math.floor(value / 10) * 10;
                        stats.distribution[bucket] = (stats.distribution[bucket] || 0) + 1;
                    }
                    
                    stats.average = data.length > 0 ? sum / data.length : 0;
                    return stats;
                }",
        "symbols": [],
        "start_line": 66,
        "end_line": 89,
        "start_col": 8,
        "end_col": 9,
        "children": []
      },
      {
        "id": 1477333453,
        "type": "function",
        "name": "generateId",
        "content": "function generateId(): string {
            return Math.random().toString(36).substr(2, 9);
        }",
        "symbols": [],
        "start_line": 380,
        "end_line": 382,
        "start_col": 0,
        "end_col": 1,
        "children": []
      },
      {
        "id": 1477333454,
        "type": "function",
        "name": "generateHash",
        "content": "function generateHash(item: any): string {
            return btoa(JSON.stringify(item)).substr(0, 8);
        }",
        "symbols": [],
        "start_line": 384,
        "end_line": 386,
        "start_col": 0,
        "end_col": 1,
        "children": []
      },
      {
        "id": 1477333455,
        "type": "class",
        "name": "DataProcessor",
        "content": "class DataProcessor {
            private data: any[] = [];
            
            // Small function - should not trigger nested extraction
        //     validateInput(input: string): boolean {
        //         if (!input) return false;
        //         return input.length > 0;
        //     }
        //     
        //     // Large function - should trigger nested extraction
        //     processLargeDataset(dataset: any[]): ProcessedData {
        //         const results: ProcessedData = {
        //             processed: [],
        //             errors: [],
        //             statistics: {}
        //         };
        //         
        //         function cleanData(rawData: any[]): any[] {
        //             const cleaned = [];
        //             for (const item of rawData) {
        //                 if (item && typeof item === 'object') {
        //                     cleaned.push({
        //                         id: item.id || generateId(),
        //                         value: item.value || 0,
        //                         timestamp: item.timestamp || Date.now()
        //                     });
        //                 }
        //             }
        //             return cleaned;
        //         }
        //         
        //         function validateData(data: any[]): ValidationResult {
        //             const result: ValidationResult = {
        //                 valid: [],
        //                 invalid: [],
        //                 warnings: []
        //             };
        //             
        //             for (const item of data) {
        //                 if (!item.id) {
        //                     result.invalid.push(item);
        //                     continue;
        //                 }
        //                 
        //                 if (item.value < 0) {
        //                     result.warnings.push(`Negative value for item ${item.id}`);
        //                 }
        //                 
        //                 result.valid.push(item);
        //             }
        //             
        //             return result;
        //         }
        //         
        //         function transformData(validData: any[]): any[] {
        //             return validData.map(item => ({
        //                 ...item,
        //                 processed: true,
        //                 processedAt: new Date().toISOString(),
        //                 hash: generateHash(item)
        //             }));
        //         }
        //         
        //         function generateStatistics(data: any[]): Statistics {
        //             const stats: Statistics = {
        //                 total: data.length,
        //                 average: 0,
        //                 min: Number.MAX_VALUE,
        //                 max: Number.MIN_VALUE,
        //                 distribution: {}
        //             };
        //             
        //             let sum = 0;
        //             for (const item of data) {
        //                 const value = item.value || 0;
        //                 sum += value;
        //                 
        //                 if (value < stats.min) stats.min = value;
        //                 if (value > stats.max) stats.max = value;
        //                 
        //                 const bucket = Math.floor(value / 10) * 10;
        //                 stats.distribution[bucket] = (stats.distribution[bucket] || 0) + 1;
        //             }
        //             
        //             stats.average = data.length > 0 ? sum / data.length : 0;
        //             return stats;
        //         }
        //         
        //         // Processing step 1
        //         // Processing step 2
        //         // Processing step 3
        //         // Processing step 4
        //         // Processing step 5
        //         // Processing step 6
        //         // Processing step 7
        //         // Processing step 8
        //         // Processing step 9
        //         // Processing step 10
        //         // Processing step 11
        //         // Processing step 12
        //         // Processing step 13
        //         // Processing step 14
        //         // Processing step 15
        //         // Processing step 16
        //         // Processing step 17
        //         // Processing step 18
        //         // Processing step 19
        //         // Processing step 20
        //         // Processing step 21
        //         // Processing step 22
        //         // Processing step 23
        //         // Processing step 24
        //         // Processing step 25
        //         // Processing step 26
        //         // Processing step 27
        //         // Processing step 28
        //         // Processing step 29
        //         // Processing step 30
        //         // Processing step 31
        //         // Processing step 32
        //         // Processing step 33
        //         // Processing step 34
        //         // Processing step 35
        //         // Processing step 36
        //         // Processing step 37
        //         // Processing step 38
        //         // Processing step 39
        //         // Processing step 40
        //         // Processing step 41
        //         // Processing step 42
        //         // Processing step 43
        //         // Processing step 44
        //         // Processing step 45
        //         // Processing step 46
        //         // Processing step 47
        //         // Processing step 48
        //         // Processing step 49
        //         // Processing step 50
        //         // Processing step 51
        //         // Processing step 52
        //         // Processing step 53
        //         // Processing step 54
        //         // Processing step 55
        //         // Processing step 56
        //         // Processing step 57
        //         // Processing step 58
        //         // Processing step 59
        //         // Processing step 60
        //         // Processing step 61
        //         // Processing step 62
        //         // Processing step 63
        //         // Processing step 64
        //         // Processing step 65
        //         // Processing step 66
        //         // Processing step 67
        //         // Processing step 68
        //         // Processing step 69
        //         // Processing step 70
        //         // Processing step 71
        //         // Processing step 72
        //         // Processing step 73
        //         // Processing step 74
        //         // Processing step 75
        //         // Processing step 76
        //         // Processing step 77
        //         // Processing step 78
        //         // Processing step 79
        //         // Processing step 80
        //         // Processing step 81
        //         // Processing step 82
        //         // Processing step 83
        //         // Processing step 84
        //         // Processing step 85
        //         // Processing step 86
        //         // Processing step 87
        //         // Processing step 88
        //         // Processing step 89
        //         // Processing step 90
        //         // Processing step 91
        //         // Processing step 92
        //         // Processing step 93
        //         // Processing step 94
        //         // Processing step 95
        //         // Processing step 96
        //         // Processing step 97
        //         // Processing step 98
        //         // Processing step 99
        //         // Processing step 100
        //         // Processing step 101
        //         // Processing step 102
        //         // Processing step 103
        //         // Processing step 104
        //         // Processing step 105
        //         // Processing step 106
        //         // Processing step 107
        //         // Processing step 108
        //         // Processing step 109
        //         // Processing step 110
        //         // Processing step 111
        //         // Processing step 112
        //         // Processing step 113
        //         // Processing step 114
        //         // Processing step 115
        //         // Processing step 116
        //         // Processing step 117
        //         // Processing step 118
        //         // Processing step 119
        //         // Processing step 120
        //         // Processing step 121
        //         // Processing step 122
        //         // Processing step 123
        //         // Processing step 124
        //         // Processing step 125
        //         // Processing step 126
        //         // Processing step 127
        //         // Processing step 128
        //         // Processing step 129
        //         // Processing step 130
        //         // Processing step 131
        //         // Processing step 132
        //         // Processing step 133
        //         // Processing step 134
        //         // Processing step 135
        //         // Processing step 136
        //         // Processing step 137
        //         // Processing step 138
        //         // Processing step 139
        //         // Processing step 140
        //         // Processing step 141
        //         // Processing step 142
        //         // Processing step 143
        //         // Processing step 144
        //         // Processing step 145
        //         // Processing step 146
        //         // Processing step 147
        //         // Processing step 148
        //         // Processing step 149
        //         // Processing step 150
        //         // Processing step 151
        //         // Processing step 152
        //         // Processing step 153
        //         // Processing step 154
        //         // Processing step 155
        //         // Processing step 156
        //         // Processing step 157
        //         // Processing step 158
        //         // Processing step 159
        //         // Processing step 160
        //         // Processing step 161
        //         // Processing step 162
        //         // Processing step 163
        //         // Processing step 164
        //         // Processing step 165
        //         // Processing step 166
        //         // Processing step 167
        //         // Processing step 168
        //         // Processing step 169
        //         // Processing step 170
        //         // Processing step 171
        //         // Processing step 172
        //         // Processing step 173
        //         // Processing step 174
        //         // Processing step 175
        //         // Processing step 176
        //         // Processing step 177
        //         // Processing step 178
        //         // Processing step 179
        //         // Processing step 180
        //         // Processing step 181
        //         // Processing step 182
        //         // Processing step 183
        //         // Processing step 184
        //         // Processing step 185
        //         // Processing step 186
        //         // Processing step 187
        //         // Processing step 188
        //         // Processing step 189
        //         // Processing step 190
        //         // Processing step 191
        //         // Processing step 192
        //         // Processing step 193
        //         // Processing step 194
        //         // Processing step 195
        //         // Processing step 196
        //         // Processing step 197
        //         // Processing step 198
        //         // Processing step 199
        //         // Processing step 200
        //         // Processing step 201
        //         // Processing step 202
        //         // Processing step 203
        //         // Processing step 204
        //         // Processing step 205
        //         // Processing step 206
        //         // Processing step 207
        //         // Processing step 208
        //         // Processing step 209
        //         // Processing step 210
        //         // Processing step 211
        //         // Processing step 212
        //         // Processing step 213
        //         // Processing step 214
        //         // Processing step 215
        //         // Processing step 216
        //         // Processing step 217
        //         // Processing step 218
        //         // Processing step 219
        //         // Processing step 220
        //         // Processing step 221
        //         // Processing step 222
        //         // Processing step 223
        //         // Processing step 224
        //         // Processing step 225
        //         // Processing step 226
        //         // Processing step 227
        //         // Processing step 228
        //         // Processing step 229
        //         // Processing step 230
        //         // Processing step 231
        //         // Processing step 232
        //         // Processing step 233
        //         // Processing step 234
        //         // Processing step 235
        //         // Processing step 236
        //         // Processing step 237
        //         // Processing step 238
        //         // Processing step 239
        //         // Processing step 240
        //         // Processing step 241
        //         // Processing step 242
        //         // Processing step 243
        //         // Processing step 244
        //         // Processing step 245
        //         // Processing step 246
        //         // Processing step 247
        //         // Processing step 248
        //         // Processing step 249
        //         
        //         // Main processing logic
        //         try {
        //             const cleaned = cleanData(dataset);
        //             const validated = validateData(cleaned);
        //             const transformed = transformData(validated.valid);
        //             const statistics = generateStatistics(transformed);
        //             
        //             results.processed = transformed;
        //             results.errors = validated.invalid;
        //             results.statistics = statistics;
        //             
        //             return results;
        //         } catch (error) {
        //             console.error('Processing failed:', error);
        //             throw error;
        //         }
        //     }
        // }",
        "symbols": [],
        "start_line": 3,
        "end_line": 358,
        "start_col": 7,
        "end_col": 1,
        "children": [
          {
            "id": 1477333456,
            "type": "function",
            "name": "validateInput",
            "content": "validateInput(input: string): boolean {
                    if (!input) return false;
                    return input.length > 0;
                }",
            "symbols": [],
            "start_line": 7,
            "end_line": 10,
            "start_col": 4,
            "end_col": 5,
            "children": []
          },
          {
            "id": 1477333457,
            "type": "function",
            "name": "valid",
            "content": "processLargeDataset(dataset: any[]): ProcessedData {
                    const results: ProcessedData = {
                        processed: [],
                        errors: [],
                        statistics: {}
                    };
                    
                    function cleanData(rawData: any[]): any[] {
                        const cleaned = [];
                        for (const item of rawData) {
                            if (item && typeof item === 'object') {
                                cleaned.push({
                                    id: item.id || generateId(),
                                    value: item.value || 0,
                                    timestamp: item.timestamp || Date.now()
                                });
                            }
                        }
                        return cleaned;
                    }
                    
                    function validateData(data: any[]): ValidationResult {
                        const result: ValidationResult = {
                            valid: [],
                            invalid: [],
                            warnings: []
                        };
                        
                        for (const item of data) {
                            if (!item.id) {
                                result.invalid.push(item);
                                continue;
                            }
                            
                            if (item.value < 0) {
                                result.warnings.push(`Negative value for item ${item.id}`);
                            }
                            
                            result.valid.push(item);
                        }
                        
                        return result;
                    }
                    
                    function transformData(validData: any[]): any[] {
                        return validData.map(item => ({
                            ...item,
                            processed: true,
                            processedAt: new Date().toISOString(),
                            hash: generateHash(item)
                        }));
                    }
                    
                    function generateStatistics(data: any[]): Statistics {
                        const stats: Statistics = {
                            total: data.length,
                            average: 0,
                            min: Number.MAX_VALUE,
                            max: Number.MIN_VALUE,
                            distribution: {}
                        };
                        
                        let sum = 0;
                        for (const item of data) {
                            const value = item.value || 0;
                            sum += value;
                            
                            if (value < stats.min) stats.min = value;
                            if (value > stats.max) stats.max = value;
                            
                            const bucket = Math.floor(value / 10) * 10;
                            stats.distribution[bucket] = (stats.distribution[bucket] || 0) + 1;
                        }
                        
                        stats.average = data.length > 0 ? sum / data.length : 0;
                        return stats;
                    }
                    
                    // Processing step 1
            //         // Processing step 2
            //         // Processing step 3
            //         // Processing step 4
            //         // Processing step 5
            //         // Processing step 6
            //         // Processing step 7
            //         // Processing step 8
            //         // Processing step 9
            //         // Processing step 10
            //         // Processing step 11
            //         // Processing step 12
            //         // Processing step 13
            //         // Processing step 14
            //         // Processing step 15
            //         // Processing step 16
            //         // Processing step 17
            //         // Processing step 18
            //         // Processing step 19
            //         // Processing step 20
            //         // Processing step 21
            //         // Processing step 22
            //         // Processing step 23
            //         // Processing step 24
            //         // Processing step 25
            //         // Processing step 26
            //         // Processing step 27
            //         // Processing step 28
            //         // Processing step 29
            //         // Processing step 30
            //         // Processing step 31
            //         // Processing step 32
            //         // Processing step 33
            //         // Processing step 34
            //         // Processing step 35
            //         // Processing step 36
            //         // Processing step 37
            //         // Processing step 38
            //         // Processing step 39
            //         // Processing step 40
            //         // Processing step 41
            //         // Processing step 42
            //         // Processing step 43
            //         // Processing step 44
            //         // Processing step 45
            //         // Processing step 46
            //         // Processing step 47
            //         // Processing step 48
            //         // Processing step 49
            //         // Processing step 50
            //         // Processing step 51
            //         // Processing step 52
            //         // Processing step 53
            //         // Processing step 54
            //         // Processing step 55
            //         // Processing step 56
            //         // Processing step 57
            //         // Processing step 58
            //         // Processing step 59
            //         // Processing step 60
            //         // Processing step 61
            //         // Processing step 62
            //         // Processing step 63
            //         // Processing step 64
            //         // Processing step 65
            //         // Processing step 66
            //         // Processing step 67
            //         // Processing step 68
            //         // Processing step 69
            //         // Processing step 70
            //         // Processing step 71
            //         // Processing step 72
            //         // Processing step 73
            //         // Processing step 74
            //         // Processing step 75
            //         // Processing step 76
            //         // Processing step 77
            //         // Processing step 78
            //         // Processing step 79
            //         // Processing step 80
            //         // Processing step 81
            //         // Processing step 82
            //         // Processing step 83
            //         // Processing step 84
            //         // Processing step 85
            //         // Processing step 86
            //         // Processing step 87
            //         // Processing step 88
            //         // Processing step 89
            //         // Processing step 90
            //         // Processing step 91
            //         // Processing step 92
            //         // Processing step 93
            //         // Processing step 94
            //         // Processing step 95
            //         // Processing step 96
            //         // Processing step 97
            //         // Processing step 98
            //         // Processing step 99
            //         // Processing step 100
            //         // Processing step 101
            //         // Processing step 102
            //         // Processing step 103
            //         // Processing step 104
            //         // Processing step 105
            //         // Processing step 106
            //         // Processing step 107
            //         // Processing step 108
            //         // Processing step 109
            //         // Processing step 110
            //         // Processing step 111
            //         // Processing step 112
            //         // Processing step 113
            //         // Processing step 114
            //         // Processing step 115
            //         // Processing step 116
            //         // Processing step 117
            //         // Processing step 118
            //         // Processing step 119
            //         // Processing step 120
            //         // Processing step 121
            //         // Processing step 122
            //         // Processing step 123
            //         // Processing step 124
            //         // Processing step 125
            //         // Processing step 126
            //         // Processing step 127
            //         // Processing step 128
            //         // Processing step 129
            //         // Processing step 130
            //         // Processing step 131
            //         // Processing step 132
            //         // Processing step 133
            //         // Processing step 134
            //         // Processing step 135
            //         // Processing step 136
            //         // Processing step 137
            //         // Processing step 138
            //         // Processing step 139
            //         // Processing step 140
            //         // Processing step 141
            //         // Processing step 142
            //         // Processing step 143
            //         // Processing step 144
            //         // Processing step 145
            //         // Processing step 146
            //         // Processing step 147
            //         // Processing step 148
            //         // Processing step 149
            //         // Processing step 150
            //         // Processing step 151
            //         // Processing step 152
            //         // Processing step 153
            //         // Processing step 154
            //         // Processing step 155
            //         // Processing step 156
            //         // Processing step 157
            //         // Processing step 158
            //         // Processing step 159
            //         // Processing step 160
            //         // Processing step 161
            //         // Processing step 162
            //         // Processing step 163
            //         // Processing step 164
            //         // Processing step 165
            //         // Processing step 166
            //         // Processing step 167
            //         // Processing step 168
            //         // Processing step 169
            //         // Processing step 170
            //         // Processing step 171
            //         // Processing step 172
            //         // Processing step 173
            //         // Processing step 174
            //         // Processing step 175
            //         // Processing step 176
            //         // Processing step 177
            //         // Processing step 178
            //         // Processing step 179
            //         // Processing step 180
            //         // Processing step 181
            //         // Processing step 182
            //         // Processing step 183
            //         // Processing step 184
            //         // Processing step 185
            //         // Processing step 186
            //         // Processing step 187
            //         // Processing step 188
            //         // Processing step 189
            //         // Processing step 190
            //         // Processing step 191
            //         // Processing step 192
            //         // Processing step 193
            //         // Processing step 194
            //         // Processing step 195
            //         // Processing step 196
            //         // Processing step 197
            //         // Processing step 198
            //         // Processing step 199
            //         // Processing step 200
            //         // Processing step 201
            //         // Processing step 202
            //         // Processing step 203
            //         // Processing step 204
            //         // Processing step 205
            //         // Processing step 206
            //         // Processing step 207
            //         // Processing step 208
            //         // Processing step 209
            //         // Processing step 210
            //         // Processing step 211
            //         // Processing step 212
            //         // Processing step 213
            //         // Processing step 214
            //         // Processing step 215
            //         // Processing step 216
            //         // Processing step 217
            //         // Processing step 218
            //         // Processing step 219
            //         // Processing step 220
            //         // Processing step 221
            //         // Processing step 222
            //         // Processing step 223
            //         // Processing step 224
            //         // Processing step 225
            //         // Processing step 226
            //         // Processing step 227
            //         // Processing step 228
            //         // Processing step 229
            //         // Processing step 230
            //         // Processing step 231
            //         // Processing step 232
            //         // Processing step 233
            //         // Processing step 234
            //         // Processing step 235
            //         // Processing step 236
            //         // Processing step 237
            //         // Processing step 238
            //         // Processing step 239
            //         // Processing step 240
            //         // Processing step 241
            //         // Processing step 242
            //         // Processing step 243
            //         // Processing step 244
            //         // Processing step 245
            //         // Processing step 246
            //         // Processing step 247
            //         // Processing step 248
            //         // Processing step 249
            //         
            //         // Main processing logic
            //         try {
            //             const cleaned = cleanData(dataset);
            //             const validated = validateData(cleaned);
            //             const transformed = transformData(validated.valid);
            //             const statistics = generateStatistics(transformed);
            //             
            //             results.processed = transformed;
            //             results.errors = validated.invalid;
            //             results.statistics = statistics;
            //             
            //             return results;
            //         } catch (error) {
            //             console.error('Processing failed:', error);
            //             throw error;
            //         }
            //     }",
            "symbols": [],
            "start_line": 13,
            "end_line": 357,
            "start_col": 4,
            "end_col": 5,
            "children": []
          },
          {
            "id": 1477333458,
            "type": "class",
            "name": "DataProcessor",
            "content": "class DataProcessor {
                private data: any[] = [];
                
                // Small function - should not trigger nested extraction
            //     validateInput(input: string): boolean {
            //         if (!input) return false;
            //         return input.length > 0;
            //     }
            //     
            //     // Large function - should trigger nested extraction
            //     processLargeDataset(dataset: any[]): ProcessedData {
            //         const results: ProcessedData = {
            //             processed: [],
            //             errors: [],
            //             statistics: {}
            //         };
            //         
            //         function cleanData(rawData: any[]): any[] {
            //             const cleaned = [];
            //             for (const item of rawData) {
            //                 if (item && typeof item === 'object') {
            //                     cleaned.push({
            //                         id: item.id || generateId(),
            //                         value: item.value || 0,
            //                         timestamp: item.timestamp || Date.now()
            //                     });
            //                 }
            //             }
            //             return cleaned;
            //         }
            //         
            //         function validateData(data: any[]): ValidationResult {
            //             const result: ValidationResult = {
            //                 valid: [],
            //                 invalid: [],
            //                 warnings: []
            //             };
            //             
            //             for (const item of data) {
            //                 if (!item.id) {
            //                     result.invalid.push(item);
            //                     continue;
            //                 }
            //                 
            //                 if (item.value < 0) {
            //                     result.warnings.push(`Negative value for item ${item.id}`);
            //                 }
            //                 
            //                 result.valid.push(item);
            //             }
            //             
            //             return result;
            //         }
            //         
            //         function transformData(validData: any[]): any[] {
            //             return validData.map(item => ({
            //                 ...item,
            //                 processed: true,
            //                 processedAt: new Date().toISOString(),
            //                 hash: generateHash(item)
            //             }));
            //         }
            //         
            //         function generateStatistics(data: any[]): Statistics {
            //             const stats: Statistics = {
            //                 total: data.length,
            //                 average: 0,
            //                 min: Number.MAX_VALUE,
            //                 max: Number.MIN_VALUE,
            //                 distribution: {}
            //             };
            //             
            //             let sum = 0;
            //             for (const item of data) {
            //                 const value = item.value || 0;
            //                 sum += value;
            //                 
            //                 if (value < stats.min) stats.min = value;
            //                 if (value > stats.max) stats.max = value;
            //                 
            //                 const bucket = Math.floor(value / 10) * 10;
            //                 stats.distribution[bucket] = (stats.distribution[bucket] || 0) + 1;
            //             }
            //             
            //             stats.average = data.length > 0 ? sum / data.length : 0;
            //             return stats;
            //         }
            //         
            //         // Processing step 1
            //         // Processing step 2
            //         // Processing step 3
            //         // Processing step 4
            //         // Processing step 5
            //         // Processing step 6
            //         // Processing step 7
            //         // Processing step 8
            //         // Processing step 9
            //         // Processing step 10
            //         // Processing step 11
            //         // Processing step 12
            //         // Processing step 13
            //         // Processing step 14
            //         // Processing step 15
            //         // Processing step 16
            //         // Processing step 17
            //         // Processing step 18
            //         // Processing step 19
            //         // Processing step 20
            //         // Processing step 21
            //         // Processing step 22
            //         // Processing step 23
            //         // Processing step 24
            //         // Processing step 25
            //         // Processing step 26
            //         // Processing step 27
            //         // Processing step 28
            //         // Processing step 29
            //         // Processing step 30
            //         // Processing step 31
            //         // Processing step 32
            //         // Processing step 33
            //         // Processing step 34
            //         // Processing step 35
            //         // Processing step 36
            //         // Processing step 37
            //         // Processing step 38
            //         // Processing step 39
            //         // Processing step 40
            //         // Processing step 41
            //         // Processing step 42
            //         // Processing step 43
            //         // Processing step 44
            //         // Processing step 45
            //         // Processing step 46
            //         // Processing step 47
            //         // Processing step 48
            //         // Processing step 49
            //         // Processing step 50
            //         // Processing step 51
            //         // Processing step 52
            //         // Processing step 53
            //         // Processing step 54
            //         // Processing step 55
            //         // Processing step 56
            //         // Processing step 57
            //         // Processing step 58
            //         // Processing step 59
            //         // Processing step 60
            //         // Processing step 61
            //         // Processing step 62
            //         // Processing step 63
            //         // Processing step 64
            //         // Processing step 65
            //         // Processing step 66
            //         // Processing step 67
            //         // Processing step 68
            //         // Processing step 69
            //         // Processing step 70
            //         // Processing step 71
            //         // Processing step 72
            //         // Processing step 73
            //         // Processing step 74
            //         // Processing step 75
            //         // Processing step 76
            //         // Processing step 77
            //         // Processing step 78
            //         // Processing step 79
            //         // Processing step 80
            //         // Processing step 81
            //         // Processing step 82
            //         // Processing step 83
            //         // Processing step 84
            //         // Processing step 85
            //         // Processing step 86
            //         // Processing step 87
            //         // Processing step 88
            //         // Processing step 89
            //         // Processing step 90
            //         // Processing step 91
            //         // Processing step 92
            //         // Processing step 93
            //         // Processing step 94
            //         // Processing step 95
            //         // Processing step 96
            //         // Processing step 97
            //         // Processing step 98
            //         // Processing step 99
            //         // Processing step 100
            //         // Processing step 101
            //         // Processing step 102
            //         // Processing step 103
            //         // Processing step 104
            //         // Processing step 105
            //         // Processing step 106
            //         // Processing step 107
            //         // Processing step 108
            //         // Processing step 109
            //         // Processing step 110
            //         // Processing step 111
            //         // Processing step 112
            //         // Processing step 113
            //         // Processing step 114
            //         // Processing step 115
            //         // Processing step 116
            //         // Processing step 117
            //         // Processing step 118
            //         // Processing step 119
            //         // Processing step 120
            //         // Processing step 121
            //         // Processing step 122
            //         // Processing step 123
            //         // Processing step 124
            //         // Processing step 125
            //         // Processing step 126
            //         // Processing step 127
            //         // Processing step 128
            //         // Processing step 129
            //         // Processing step 130
            //         // Processing step 131
            //         // Processing step 132
            //         // Processing step 133
            //         // Processing step 134
            //         // Processing step 135
            //         // Processing step 136
            //         // Processing step 137
            //         // Processing step 138
            //         // Processing step 139
            //         // Processing step 140
            //         // Processing step 141
            //         // Processing step 142
            //         // Processing step 143
            //         // Processing step 144
            //         // Processing step 145
            //         // Processing step 146
            //         // Processing step 147
            //         // Processing step 148
            //         // Processing step 149
            //         // Processing step 150
            //         // Processing step 151
            //         // Processing step 152
            //         // Processing step 153
            //         // Processing step 154
            //         // Processing step 155
            //         // Processing step 156
            //         // Processing step 157
            //         // Processing step 158
            //         // Processing step 159
            //         // Processing step 160
            //         // Processing step 161
            //         // Processing step 162
            //         // Processing step 163
            //         // Processing step 164
            //         // Processing step 165
            //         // Processing step 166
            //         // Processing step 167
            //         // Processing step 168
            //         // Processing step 169
            //         // Processing step 170
            //         // Processing step 171
            //         // Processing step 172
            //         // Processing step 173
            //         // Processing step 174
            //         // Processing step 175
            //         // Processing step 176
            //         // Processing step 177
            //         // Processing step 178
            //         // Processing step 179
            //         // Processing step 180
            //         // Processing step 181
            //         // Processing step 182
            //         // Processing step 183
            //         // Processing step 184
            //         // Processing step 185
            //         // Processing step 186
            //         // Processing step 187
            //         // Processing step 188
            //         // Processing step 189
            //         // Processing step 190
            //         // Processing step 191
            //         // Processing step 192
            //         // Processing step 193
            //         // Processing step 194
            //         // Processing step 195
            //         // Processing step 196
            //         // Processing step 197
            //         // Processing step 198
            //         // Processing step 199
            //         // Processing step 200
            //         // Processing step 201
            //         // Processing step 202
            //         // Processing step 203
            //         // Processing step 204
            //         // Processing step 205
            //         // Processing step 206
            //         // Processing step 207
            //         // Processing step 208
            //         // Processing step 209
            //         // Processing step 210
            //         // Processing step 211
            //         // Processing step 212
            //         // Processing step 213
            //         // Processing step 214
            //         // Processing step 215
            //         // Processing step 216
            //         // Processing step 217
            //         // Processing step 218
            //         // Processing step 219
            //         // Processing step 220
            //         // Processing step 221
            //         // Processing step 222
            //         // Processing step 223
            //         // Processing step 224
            //         // Processing step 225
            //         // Processing step 226
            //         // Processing step 227
            //         // Processing step 228
            //         // Processing step 229
            //         // Processing step 230
            //         // Processing step 231
            //         // Processing step 232
            //         // Processing step 233
            //         // Processing step 234
            //         // Processing step 235
            //         // Processing step 236
            //         // Processing step 237
            //         // Processing step 238
            //         // Processing step 239
            //         // Processing step 240
            //         // Processing step 241
            //         // Processing step 242
            //         // Processing step 243
            //         // Processing step 244
            //         // Processing step 245
            //         // Processing step 246
            //         // Processing step 247
            //         // Processing step 248
            //         // Processing step 249
            //         
            //         // Main processing logic
            //         try {
            //             const cleaned = cleanData(dataset);
            //             const validated = validateData(cleaned);
            //             const transformed = transformData(validated.valid);
            //             const statistics = generateStatistics(transformed);
            //             
            //             results.processed = transformed;
            //             results.errors = validated.invalid;
            //             results.statistics = statistics;
            //             
            //             return results;
            //         } catch (error) {
            //             console.error('Processing failed:', error);
            //             throw error;
            //         }
            //     }
            // }",
            "symbols": [],
            "start_line": 3,
            "end_line": 358,
            "start_col": 7,
            "end_col": 1,
            "children": []
          }
        ]
      },
      {
        "id": 1477333459,
        "type": "interface",
        "name": "ProcessedData",
        "content": "interface ProcessedData {
            processed: any[];
            errors: any[];
            statistics: Statistics;
        }",
        "symbols": [],
        "start_line": 360,
        "end_line": 364,
        "start_col": 0,
        "end_col": 1,
        "children": [
          {
            "id": 1477333460,
            "type": "variable",
            "name": "processed",
            "content": "processed: any[]",
            "symbols": [],
            "start_line": 361,
            "end_line": 361,
            "start_col": 4,
            "end_col": 20,
            "children": []
          },
          {
            "id": 1477333461,
            "type": "variable",
            "name": "errors",
            "content": "errors: any[]",
            "symbols": [],
            "start_line": 362,
            "end_line": 362,
            "start_col": 4,
            "end_col": 17,
            "children": []
          },
          {
            "id": 1477333462,
            "type": "variable",
            "name": "statistics",
            "content": "statistics: Statistics",
            "symbols": [],
            "start_line": 363,
            "end_line": 363,
            "start_col": 4,
            "end_col": 26,
            "children": []
          }
        ]
      },
      {
        "id": 1477333463,
        "type": "interface",
        "name": "ValidationResult",
        "content": "interface ValidationResult {
            valid: any[];
            invalid: any[];
            warnings: string[];
        }",
        "symbols": [],
        "start_line": 366,
        "end_line": 370,
        "start_col": 0,
        "end_col": 1,
        "children": [
          {
            "id": 1477333464,
            "type": "variable",
            "name": "valid",
            "content": "valid: any[]",
            "symbols": [],
            "start_line": 367,
            "end_line": 367,
            "start_col": 4,
            "end_col": 16,
            "children": []
          },
          {
            "id": 1477333465,
            "type": "variable",
            "name": "invalid",
            "content": "invalid: any[]",
            "symbols": [],
            "start_line": 368,
            "end_line": 368,
            "start_col": 4,
            "end_col": 18,
            "children": []
          },
          {
            "id": 1477333466,
            "type": "variable",
            "name": "warnings",
            "content": "warnings: string[]",
            "symbols": [],
            "start_line": 369,
            "end_line": 369,
            "start_col": 4,
            "end_col": 22,
            "children": []
          }
        ]
      },
      {
        "id": 1477333467,
        "type": "interface",
        "name": "Statistics",
        "content": "interface Statistics {
            total: number;
            average: number;
            min: number;
            max: number;
            distribution: Record<string, number>;
        }",
        "symbols": [],
        "start_line": 372,
        "end_line": 378,
        "start_col": 0,
        "end_col": 1,
        "children": [
          {
            "id": 1477333468,
            "type": "variable",
            "name": "total",
            "content": "total: number",
            "symbols": [],
            "start_line": 373,
            "end_line": 373,
            "start_col": 4,
            "end_col": 17,
            "children": []
          },
          {
            "id": 1477333469,
            "type": "variable",
            "name": "average",
            "content": "average: number",
            "symbols": [],
            "start_line": 374,
            "end_line": 374,
            "start_col": 4,
            "end_col": 19,
            "children": []
          },
          {
            "id": 1477333470,
            "type": "variable",
            "name": "min",
            "content": "min: number",
            "symbols": [],
            "start_line": 375,
            "end_line": 375,
            "start_col": 4,
            "end_col": 15,
            "children": []
          },
          {
            "id": 1477333471,
            "type": "variable",
            "name": "max",
            "content": "max: number",
            "symbols": [],
            "start_line": 376,
            "end_line": 376,
            "start_col": 4,
            "end_col": 15,
            "children": []
          },
          {
            "id": 1477333472,
            "type": "variable",
            "name": "distribution",
            "content": "distribution: Record<string, number>",
            "symbols": [],
            "start_line": 377,
            "end_line": 377,
            "start_col": 4,
            "end_col": 40,
            "children": []
          }
        ]
      }
    ],
    "relationships": []
  }
}