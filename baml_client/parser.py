# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions

from . import stream_types, types
from .runtime import DoNotUseDirectlyCallManager, BamlCallOptions

class LlmResponseParser:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AnthropicClaudeCodeManager(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CodeManagerResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnthropicClaudeCodeManager", llm_response=llm_response, mode="request")
        return typing.cast(types.CodeManagerResponse, result)

    def AnthropicClaudeConnectionMatching(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ConnectionMatchingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnthropicClaudeConnectionMatching", llm_response=llm_response, mode="request")
        return typing.cast(types.ConnectionMatchingResponse, result)

    def AnthropicClaudeConnectionSplitting(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ConnectionSplittingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnthropicClaudeConnectionSplitting", llm_response=llm_response, mode="request")
        return typing.cast(types.ConnectionSplittingResponse, result)

    def AnthropicClaudeImplementationDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnthropicClaudeImplementationDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def AnthropicClaudeImportDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnthropicClaudeImportDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def AnthropicClaudePackageDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnthropicClaudePackageDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def AnthropicClaudeRoadmapAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.RoadmapResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnthropicClaudeRoadmapAgent", llm_response=llm_response, mode="request")
        return typing.cast(types.RoadmapResponse, result)

    def AnthropicClaudeSutraCliAssistant(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnthropicClaudeSutraCliAssistant", llm_response=llm_response, mode="request")
        return typing.cast(str, result)

    def AnthropicClaudeTaskFilter(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TaskFilterResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnthropicClaudeTaskFilter", llm_response=llm_response, mode="request")
        return typing.cast(types.TaskFilterResponse, result)

    def AnthropicClaudeTechnologyCorrection(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TechnologyCorrectionResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnthropicClaudeTechnologyCorrection", llm_response=llm_response, mode="request")
        return typing.cast(types.TechnologyCorrectionResponse, result)

    def AwsBedrockCodeManager(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CodeManagerResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AwsBedrockCodeManager", llm_response=llm_response, mode="request")
        return typing.cast(types.CodeManagerResponse, result)

    def AwsBedrockConnectionMatching(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ConnectionMatchingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AwsBedrockConnectionMatching", llm_response=llm_response, mode="request")
        return typing.cast(types.ConnectionMatchingResponse, result)

    def AwsBedrockConnectionSplitting(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ConnectionSplittingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AwsBedrockConnectionSplitting", llm_response=llm_response, mode="request")
        return typing.cast(types.ConnectionSplittingResponse, result)

    def AwsBedrockImplementationDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AwsBedrockImplementationDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def AwsBedrockImportDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AwsBedrockImportDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def AwsBedrockPackageDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AwsBedrockPackageDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def AwsBedrockRoadmapAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.RoadmapResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AwsBedrockRoadmapAgent", llm_response=llm_response, mode="request")
        return typing.cast(types.RoadmapResponse, result)

    def AwsBedrockSutraCliAssistant(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AwsBedrockSutraCliAssistant", llm_response=llm_response, mode="request")
        return typing.cast(str, result)

    def AwsBedrockTaskFilter(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TaskFilterResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AwsBedrockTaskFilter", llm_response=llm_response, mode="request")
        return typing.cast(types.TaskFilterResponse, result)

    def AwsBedrockTechnologyCorrection(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TechnologyCorrectionResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AwsBedrockTechnologyCorrection", llm_response=llm_response, mode="request")
        return typing.cast(types.TechnologyCorrectionResponse, result)

    def AzureAIFoundryCodeManager(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CodeManagerResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureAIFoundryCodeManager", llm_response=llm_response, mode="request")
        return typing.cast(types.CodeManagerResponse, result)

    def AzureAIFoundryConnectionMatching(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ConnectionMatchingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureAIFoundryConnectionMatching", llm_response=llm_response, mode="request")
        return typing.cast(types.ConnectionMatchingResponse, result)

    def AzureAIFoundryConnectionSplitting(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ConnectionSplittingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureAIFoundryConnectionSplitting", llm_response=llm_response, mode="request")
        return typing.cast(types.ConnectionSplittingResponse, result)

    def AzureAIFoundryImplementationDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureAIFoundryImplementationDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def AzureAIFoundryImportDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureAIFoundryImportDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def AzureAIFoundryPackageDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureAIFoundryPackageDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def AzureAIFoundryRoadmapAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.RoadmapResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureAIFoundryRoadmapAgent", llm_response=llm_response, mode="request")
        return typing.cast(types.RoadmapResponse, result)

    def AzureAIFoundrySutraCliAssistant(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureAIFoundrySutraCliAssistant", llm_response=llm_response, mode="request")
        return typing.cast(str, result)

    def AzureAIFoundryTaskFilter(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TaskFilterResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureAIFoundryTaskFilter", llm_response=llm_response, mode="request")
        return typing.cast(types.TaskFilterResponse, result)

    def AzureAIFoundryTechnologyCorrection(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TechnologyCorrectionResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureAIFoundryTechnologyCorrection", llm_response=llm_response, mode="request")
        return typing.cast(types.TechnologyCorrectionResponse, result)

    def AzureOpenAICodeManager(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CodeManagerResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureOpenAICodeManager", llm_response=llm_response, mode="request")
        return typing.cast(types.CodeManagerResponse, result)

    def AzureOpenAIConnectionMatching(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ConnectionMatchingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureOpenAIConnectionMatching", llm_response=llm_response, mode="request")
        return typing.cast(types.ConnectionMatchingResponse, result)

    def AzureOpenAIConnectionSplitting(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ConnectionSplittingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureOpenAIConnectionSplitting", llm_response=llm_response, mode="request")
        return typing.cast(types.ConnectionSplittingResponse, result)

    def AzureOpenAIImplementationDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureOpenAIImplementationDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def AzureOpenAIImportDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureOpenAIImportDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def AzureOpenAIPackageDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureOpenAIPackageDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def AzureOpenAIRoadmapAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.RoadmapResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureOpenAIRoadmapAgent", llm_response=llm_response, mode="request")
        return typing.cast(types.RoadmapResponse, result)

    def AzureOpenAISutraCliAssistant(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureOpenAISutraCliAssistant", llm_response=llm_response, mode="request")
        return typing.cast(str, result)

    def AzureOpenAITaskFilter(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TaskFilterResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureOpenAITaskFilter", llm_response=llm_response, mode="request")
        return typing.cast(types.TaskFilterResponse, result)

    def AzureOpenAITechnologyCorrection(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TechnologyCorrectionResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureOpenAITechnologyCorrection", llm_response=llm_response, mode="request")
        return typing.cast(types.TechnologyCorrectionResponse, result)

    def GCPVertexAICodeManager(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CodeManagerResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GCPVertexAICodeManager", llm_response=llm_response, mode="request")
        return typing.cast(types.CodeManagerResponse, result)

    def GCPVertexAIConnectionMatching(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ConnectionMatchingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GCPVertexAIConnectionMatching", llm_response=llm_response, mode="request")
        return typing.cast(types.ConnectionMatchingResponse, result)

    def GCPVertexAIConnectionSplitting(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ConnectionSplittingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GCPVertexAIConnectionSplitting", llm_response=llm_response, mode="request")
        return typing.cast(types.ConnectionSplittingResponse, result)

    def GCPVertexAIImplementationDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GCPVertexAIImplementationDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def GCPVertexAIImportDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GCPVertexAIImportDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def GCPVertexAIPackageDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GCPVertexAIPackageDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def GCPVertexAIRoadmapAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.RoadmapResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GCPVertexAIRoadmapAgent", llm_response=llm_response, mode="request")
        return typing.cast(types.RoadmapResponse, result)

    def GCPVertexAISutraCliAssistant(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GCPVertexAISutraCliAssistant", llm_response=llm_response, mode="request")
        return typing.cast(str, result)

    def GCPVertexAITaskFilter(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TaskFilterResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GCPVertexAITaskFilter", llm_response=llm_response, mode="request")
        return typing.cast(types.TaskFilterResponse, result)

    def GCPVertexAITechnologyCorrection(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TechnologyCorrectionResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GCPVertexAITechnologyCorrection", llm_response=llm_response, mode="request")
        return typing.cast(types.TechnologyCorrectionResponse, result)

    def GoogleGeminiCodeManager(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CodeManagerResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GoogleGeminiCodeManager", llm_response=llm_response, mode="request")
        return typing.cast(types.CodeManagerResponse, result)

    def GoogleGeminiConnectionMatching(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ConnectionMatchingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GoogleGeminiConnectionMatching", llm_response=llm_response, mode="request")
        return typing.cast(types.ConnectionMatchingResponse, result)

    def GoogleGeminiConnectionSplitting(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ConnectionSplittingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GoogleGeminiConnectionSplitting", llm_response=llm_response, mode="request")
        return typing.cast(types.ConnectionSplittingResponse, result)

    def GoogleGeminiImplementationDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GoogleGeminiImplementationDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def GoogleGeminiImportDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GoogleGeminiImportDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def GoogleGeminiPackageDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GoogleGeminiPackageDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def GoogleGeminiRoadmapAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.RoadmapResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GoogleGeminiRoadmapAgent", llm_response=llm_response, mode="request")
        return typing.cast(types.RoadmapResponse, result)

    def GoogleGeminiSutraCliAssistant(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GoogleGeminiSutraCliAssistant", llm_response=llm_response, mode="request")
        return typing.cast(str, result)

    def GoogleGeminiTaskFilter(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TaskFilterResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GoogleGeminiTaskFilter", llm_response=llm_response, mode="request")
        return typing.cast(types.TaskFilterResponse, result)

    def GoogleGeminiTechnologyCorrection(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TechnologyCorrectionResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GoogleGeminiTechnologyCorrection", llm_response=llm_response, mode="request")
        return typing.cast(types.TechnologyCorrectionResponse, result)

    def OpenAIChatGPTCodeManager(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CodeManagerResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenAIChatGPTCodeManager", llm_response=llm_response, mode="request")
        return typing.cast(types.CodeManagerResponse, result)

    def OpenAIChatGPTConnectionMatching(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ConnectionMatchingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenAIChatGPTConnectionMatching", llm_response=llm_response, mode="request")
        return typing.cast(types.ConnectionMatchingResponse, result)

    def OpenAIChatGPTConnectionSplitting(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ConnectionSplittingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenAIChatGPTConnectionSplitting", llm_response=llm_response, mode="request")
        return typing.cast(types.ConnectionSplittingResponse, result)

    def OpenAIChatGPTImplementationDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenAIChatGPTImplementationDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def OpenAIChatGPTImportDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenAIChatGPTImportDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def OpenAIChatGPTPackageDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenAIChatGPTPackageDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def OpenAIChatGPTRoadmapAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.RoadmapResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenAIChatGPTRoadmapAgent", llm_response=llm_response, mode="request")
        return typing.cast(types.RoadmapResponse, result)

    def OpenAIChatGPTSutraCliAssistant(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenAIChatGPTSutraCliAssistant", llm_response=llm_response, mode="request")
        return typing.cast(str, result)

    def OpenAIChatGPTTaskFilter(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TaskFilterResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenAIChatGPTTaskFilter", llm_response=llm_response, mode="request")
        return typing.cast(types.TaskFilterResponse, result)

    def OpenAIChatGPTTechnologyCorrection(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TechnologyCorrectionResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenAIChatGPTTechnologyCorrection", llm_response=llm_response, mode="request")
        return typing.cast(types.TechnologyCorrectionResponse, result)

    def OpenRouterCodeManager(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CodeManagerResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenRouterCodeManager", llm_response=llm_response, mode="request")
        return typing.cast(types.CodeManagerResponse, result)

    def OpenRouterConnectionMatching(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ConnectionMatchingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenRouterConnectionMatching", llm_response=llm_response, mode="request")
        return typing.cast(types.ConnectionMatchingResponse, result)

    def OpenRouterConnectionSplitting(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ConnectionSplittingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenRouterConnectionSplitting", llm_response=llm_response, mode="request")
        return typing.cast(types.ConnectionSplittingResponse, result)

    def OpenRouterImplementationDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenRouterImplementationDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def OpenRouterImportDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenRouterImportDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def OpenRouterPackageDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenRouterPackageDiscovery", llm_response=llm_response, mode="request")
        return typing.cast(types.CrossIndexingResponse, result)

    def OpenRouterRoadmapAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.RoadmapResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenRouterRoadmapAgent", llm_response=llm_response, mode="request")
        return typing.cast(types.RoadmapResponse, result)

    def OpenRouterSutraCliAssistant(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenRouterSutraCliAssistant", llm_response=llm_response, mode="request")
        return typing.cast(str, result)

    def OpenRouterTaskFilter(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TaskFilterResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenRouterTaskFilter", llm_response=llm_response, mode="request")
        return typing.cast(types.TaskFilterResponse, result)

    def OpenRouterTechnologyCorrection(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TechnologyCorrectionResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenRouterTechnologyCorrection", llm_response=llm_response, mode="request")
        return typing.cast(types.TechnologyCorrectionResponse, result)

    

class LlmStreamParser:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AnthropicClaudeCodeManager(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CodeManagerResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnthropicClaudeCodeManager", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CodeManagerResponse, result)

    def AnthropicClaudeConnectionMatching(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ConnectionMatchingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnthropicClaudeConnectionMatching", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ConnectionMatchingResponse, result)

    def AnthropicClaudeConnectionSplitting(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ConnectionSplittingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnthropicClaudeConnectionSplitting", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ConnectionSplittingResponse, result)

    def AnthropicClaudeImplementationDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnthropicClaudeImplementationDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def AnthropicClaudeImportDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnthropicClaudeImportDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def AnthropicClaudePackageDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnthropicClaudePackageDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def AnthropicClaudeRoadmapAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.RoadmapResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnthropicClaudeRoadmapAgent", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.RoadmapResponse, result)

    def AnthropicClaudeSutraCliAssistant(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnthropicClaudeSutraCliAssistant", llm_response=llm_response, mode="stream")
        return typing.cast(str, result)

    def AnthropicClaudeTaskFilter(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TaskFilterResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnthropicClaudeTaskFilter", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TaskFilterResponse, result)

    def AnthropicClaudeTechnologyCorrection(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TechnologyCorrectionResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnthropicClaudeTechnologyCorrection", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TechnologyCorrectionResponse, result)

    def AwsBedrockCodeManager(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CodeManagerResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AwsBedrockCodeManager", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CodeManagerResponse, result)

    def AwsBedrockConnectionMatching(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ConnectionMatchingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AwsBedrockConnectionMatching", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ConnectionMatchingResponse, result)

    def AwsBedrockConnectionSplitting(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ConnectionSplittingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AwsBedrockConnectionSplitting", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ConnectionSplittingResponse, result)

    def AwsBedrockImplementationDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AwsBedrockImplementationDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def AwsBedrockImportDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AwsBedrockImportDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def AwsBedrockPackageDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AwsBedrockPackageDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def AwsBedrockRoadmapAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.RoadmapResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AwsBedrockRoadmapAgent", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.RoadmapResponse, result)

    def AwsBedrockSutraCliAssistant(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AwsBedrockSutraCliAssistant", llm_response=llm_response, mode="stream")
        return typing.cast(str, result)

    def AwsBedrockTaskFilter(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TaskFilterResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AwsBedrockTaskFilter", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TaskFilterResponse, result)

    def AwsBedrockTechnologyCorrection(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TechnologyCorrectionResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AwsBedrockTechnologyCorrection", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TechnologyCorrectionResponse, result)

    def AzureAIFoundryCodeManager(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CodeManagerResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureAIFoundryCodeManager", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CodeManagerResponse, result)

    def AzureAIFoundryConnectionMatching(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ConnectionMatchingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureAIFoundryConnectionMatching", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ConnectionMatchingResponse, result)

    def AzureAIFoundryConnectionSplitting(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ConnectionSplittingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureAIFoundryConnectionSplitting", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ConnectionSplittingResponse, result)

    def AzureAIFoundryImplementationDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureAIFoundryImplementationDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def AzureAIFoundryImportDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureAIFoundryImportDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def AzureAIFoundryPackageDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureAIFoundryPackageDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def AzureAIFoundryRoadmapAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.RoadmapResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureAIFoundryRoadmapAgent", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.RoadmapResponse, result)

    def AzureAIFoundrySutraCliAssistant(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureAIFoundrySutraCliAssistant", llm_response=llm_response, mode="stream")
        return typing.cast(str, result)

    def AzureAIFoundryTaskFilter(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TaskFilterResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureAIFoundryTaskFilter", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TaskFilterResponse, result)

    def AzureAIFoundryTechnologyCorrection(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TechnologyCorrectionResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureAIFoundryTechnologyCorrection", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TechnologyCorrectionResponse, result)

    def AzureOpenAICodeManager(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CodeManagerResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureOpenAICodeManager", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CodeManagerResponse, result)

    def AzureOpenAIConnectionMatching(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ConnectionMatchingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureOpenAIConnectionMatching", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ConnectionMatchingResponse, result)

    def AzureOpenAIConnectionSplitting(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ConnectionSplittingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureOpenAIConnectionSplitting", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ConnectionSplittingResponse, result)

    def AzureOpenAIImplementationDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureOpenAIImplementationDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def AzureOpenAIImportDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureOpenAIImportDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def AzureOpenAIPackageDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureOpenAIPackageDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def AzureOpenAIRoadmapAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.RoadmapResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureOpenAIRoadmapAgent", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.RoadmapResponse, result)

    def AzureOpenAISutraCliAssistant(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureOpenAISutraCliAssistant", llm_response=llm_response, mode="stream")
        return typing.cast(str, result)

    def AzureOpenAITaskFilter(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TaskFilterResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureOpenAITaskFilter", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TaskFilterResponse, result)

    def AzureOpenAITechnologyCorrection(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TechnologyCorrectionResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AzureOpenAITechnologyCorrection", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TechnologyCorrectionResponse, result)

    def GCPVertexAICodeManager(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CodeManagerResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GCPVertexAICodeManager", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CodeManagerResponse, result)

    def GCPVertexAIConnectionMatching(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ConnectionMatchingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GCPVertexAIConnectionMatching", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ConnectionMatchingResponse, result)

    def GCPVertexAIConnectionSplitting(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ConnectionSplittingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GCPVertexAIConnectionSplitting", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ConnectionSplittingResponse, result)

    def GCPVertexAIImplementationDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GCPVertexAIImplementationDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def GCPVertexAIImportDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GCPVertexAIImportDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def GCPVertexAIPackageDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GCPVertexAIPackageDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def GCPVertexAIRoadmapAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.RoadmapResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GCPVertexAIRoadmapAgent", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.RoadmapResponse, result)

    def GCPVertexAISutraCliAssistant(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GCPVertexAISutraCliAssistant", llm_response=llm_response, mode="stream")
        return typing.cast(str, result)

    def GCPVertexAITaskFilter(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TaskFilterResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GCPVertexAITaskFilter", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TaskFilterResponse, result)

    def GCPVertexAITechnologyCorrection(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TechnologyCorrectionResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GCPVertexAITechnologyCorrection", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TechnologyCorrectionResponse, result)

    def GoogleGeminiCodeManager(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CodeManagerResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GoogleGeminiCodeManager", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CodeManagerResponse, result)

    def GoogleGeminiConnectionMatching(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ConnectionMatchingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GoogleGeminiConnectionMatching", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ConnectionMatchingResponse, result)

    def GoogleGeminiConnectionSplitting(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ConnectionSplittingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GoogleGeminiConnectionSplitting", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ConnectionSplittingResponse, result)

    def GoogleGeminiImplementationDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GoogleGeminiImplementationDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def GoogleGeminiImportDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GoogleGeminiImportDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def GoogleGeminiPackageDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GoogleGeminiPackageDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def GoogleGeminiRoadmapAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.RoadmapResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GoogleGeminiRoadmapAgent", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.RoadmapResponse, result)

    def GoogleGeminiSutraCliAssistant(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GoogleGeminiSutraCliAssistant", llm_response=llm_response, mode="stream")
        return typing.cast(str, result)

    def GoogleGeminiTaskFilter(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TaskFilterResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GoogleGeminiTaskFilter", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TaskFilterResponse, result)

    def GoogleGeminiTechnologyCorrection(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TechnologyCorrectionResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GoogleGeminiTechnologyCorrection", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TechnologyCorrectionResponse, result)

    def OpenAIChatGPTCodeManager(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CodeManagerResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenAIChatGPTCodeManager", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CodeManagerResponse, result)

    def OpenAIChatGPTConnectionMatching(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ConnectionMatchingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenAIChatGPTConnectionMatching", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ConnectionMatchingResponse, result)

    def OpenAIChatGPTConnectionSplitting(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ConnectionSplittingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenAIChatGPTConnectionSplitting", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ConnectionSplittingResponse, result)

    def OpenAIChatGPTImplementationDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenAIChatGPTImplementationDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def OpenAIChatGPTImportDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenAIChatGPTImportDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def OpenAIChatGPTPackageDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenAIChatGPTPackageDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def OpenAIChatGPTRoadmapAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.RoadmapResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenAIChatGPTRoadmapAgent", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.RoadmapResponse, result)

    def OpenAIChatGPTSutraCliAssistant(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenAIChatGPTSutraCliAssistant", llm_response=llm_response, mode="stream")
        return typing.cast(str, result)

    def OpenAIChatGPTTaskFilter(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TaskFilterResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenAIChatGPTTaskFilter", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TaskFilterResponse, result)

    def OpenAIChatGPTTechnologyCorrection(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TechnologyCorrectionResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenAIChatGPTTechnologyCorrection", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TechnologyCorrectionResponse, result)

    def OpenRouterCodeManager(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CodeManagerResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenRouterCodeManager", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CodeManagerResponse, result)

    def OpenRouterConnectionMatching(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ConnectionMatchingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenRouterConnectionMatching", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ConnectionMatchingResponse, result)

    def OpenRouterConnectionSplitting(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ConnectionSplittingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenRouterConnectionSplitting", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ConnectionSplittingResponse, result)

    def OpenRouterImplementationDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenRouterImplementationDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def OpenRouterImportDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenRouterImportDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def OpenRouterPackageDiscovery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrossIndexingResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenRouterPackageDiscovery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrossIndexingResponse, result)

    def OpenRouterRoadmapAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.RoadmapResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenRouterRoadmapAgent", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.RoadmapResponse, result)

    def OpenRouterSutraCliAssistant(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenRouterSutraCliAssistant", llm_response=llm_response, mode="stream")
        return typing.cast(str, result)

    def OpenRouterTaskFilter(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TaskFilterResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenRouterTaskFilter", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TaskFilterResponse, result)

    def OpenRouterTechnologyCorrection(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TechnologyCorrectionResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OpenRouterTechnologyCorrection", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TechnologyCorrectionResponse, result)

    